Transform: AWS::LanguageExtensions
Parameters:
  KubernetesVersion:
    Description: EKS Cluster Kubernetes Version (1.XX)
    Type: String
    Default: "1.33"
    AllowedValues: ["1.31", "1.32", "1.33"]
  AmazonLinux2023AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
Mappings: 
  AzMapping: 
    a:
      PublicSubnetCidr: 10.0.0.0/24
      PrivateSubnetCidr: 10.0.1.0/24
    b: 
      PublicSubnetCidr: 10.0.2.0/24
      PrivateSubnetCidr: 10.0.3.0/24
    c: 
      PublicSubnetCidr: 10.0.4.0/24
      PrivateSubnetCidr: 10.0.5.0/24
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: igw
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: public-rt
      VpcId: !Ref Vpc
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  
  # PublicSubnets
  Fn::ForEach::PublicSubnets:
    - Az
    - [a, b]
    - PublicSubnet${Az}:
        Type: AWS::EC2::Subnet
        Properties:
          AvailabilityZone: !Sub ${AWS::Region}${Az}
          CidrBlock: !FindInMap [AzMapping, !Ref Az, PublicSubnetCidr]
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: !Sub public-subnet-${Az}
          VpcId: !Ref Vpc
      PublicSubnet${Az}RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PublicSubnetRouteTable
          SubnetId:
            Ref: !Sub PublicSubnet${Az}
  
  # PrivateSubnets
  Fn::ForEach::PrivateSubnets:
    - Az
    - [a, b]
    - PrivateSubnet${Az}:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref Vpc
          CidrBlock: !FindInMap [AzMapping, !Ref Az, PrivateSubnetCidr]
          AvailabilityZone: !Sub ${AWS::Region}${Az}
          Tags:
            - Key: Name
              Value: !Sub private-subnet-${Az}
      PrivateSubnet${Az}RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref Vpc
          Tags:
            - Key: Name
              Value: !Sub private-rt-${Az}
      Natgateway${Az}ElasticIp:
        Type: AWS::EC2::EIP
      NatGateway${Az}:
        Type: AWS::EC2::NatGateway
        Properties:
          AllocationId: !GetAtt
            - !Sub Natgateway${Az}ElasticIp
            - AllocationId
          SubnetId:
            Ref: !Sub PublicSubnet${Az}
          Tags: 
            - Key : Name
              Value : !Sub natgw-${Az}
      PrivateSubnet${Az}RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId:
            Ref: !Sub PrivateSubnet${Az}RouteTable
          SubnetId: 
            Ref: !Sub PrivateSubnet${Az}
      PrivateSubnet${Az}Route:
        Type: AWS::EC2::Route
        Properties:
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId:
            Ref: !Sub NatGateway${Az}
          RouteTableId:
            Ref: !Sub PrivateSubnet${Az}RouteTable

  BastionEc2:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: '1'                
        Timeout: PT20M
    Properties:
      ImageId: !Ref AmazonLinux2023AmiId
      InstanceType: t3.medium
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubneta
          GroupSet: 
            - !Ref BastionEc2SecurityGroup
            - !GetAtt EksCluster.ClusterSecurityGroupId
      Tags: 
        - Key: Name
          Value: bastion-ec2
      IamInstanceProfile: !Ref BastionEc2InstanceProfile
      UserData: 
        # sudo tail -f /var/log/cloud-init-output.log
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            dnf update -yq
            dnf install -yq git
            dnf groupinstall -yq "Development Tools"
            export VSC_VERSION="4.102.3"
            wget https://github.com/coder/code-server/releases/download/v$VSC_VERSION/code-server-$VSC_VERSION-linux-amd64.tar.gz
            tar -xzf code-server-$VSC_VERSION-linux-amd64.tar.gz
            mv code-server-$VSC_VERSION-linux-amd64 /usr/local/lib/code-server
            ln -s /usr/local/lib/code-server/bin/code-server /usr/local/bin/code-server
            mkdir -p /home/ec2-user/.config/code-server
            cat <<EOF > /home/ec2-user/.config/code-server/config.yaml
            bind-addr: 0.0.0.0:8000
            auth: none
            cert: false
            EOF
            chown -R ec2-user:ec2-user /home/ec2-user/.config
            cat <<EOF > /etc/systemd/system/code-server.service
            [Unit]
            Description=VS Code Server
            After=network.target
            [Service]
            Type=simple
            User=ec2-user
            ExecStart=/usr/local/bin/code-server --config /home/ec2-user/.config/code-server/config.yaml /home/ec2-user
            Restart=always
            [Install]
            WantedBy=multi-user.target
            EOF
            systemctl daemon-reload
            systemctl enable code-server
            systemctl start code-server

            sudo -Eu ec2-user bash << 'EOF'
            cd /home/ec2-user
            mkdir -p /home/ec2-user/bin
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.30.0/2024-05-12/bin/linux/amd64/kubectl
            chmod +x kubectl
            mv kubectl /home/ec2-user/bin/kubectl
            export PATH=/home/ec2-user/bin:$PATH
            echo "export PATH=/home/ec2-user/bin:$PATH" >> ~/.bashrc
            echo "alias k=kubectl" >> ~/.bashrc
            echo "complete -o default -F __start_kubectl k" >> ~/.bashrc
            echo "source <(kubectl completion bash)" >> ~/.bashrc
            exec bash
            aws eks update-kubeconfig --region ${AWS::Region} --name ${EksCluster}

            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin

            curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > /home/ec2-user/get_helm.sh
            chmod 700 /home/ec2-user/get_helm.sh
            /home/ec2-user/get_helm.sh

            mkdir -p /home/ec2-user/manifests
            echo "kind: Namespace
            apiVersion: v1
            metadata:
              name: aws-observability
              labels:
                aws-observability: enabled
            ---
            kind: ConfigMap
            apiVersion: v1
            metadata:
              name: aws-logging
              namespace: aws-observability
            data:
              output.conf: |
                [OUTPUT]
                  Name  es
                  Match *
                  Host  ${OpenSearchDomain.DomainEndpoint}
                  Port  443
                  Index web
                  Type  app
                  AWS_Auth On
                  AWS_Region ${AWS::Region}
                  tls   On" > /home/ec2-user/manifests/configmap.yaml
            kubectl apply -f /home/ec2-user/manifests/configmap.yaml
            kubectl create ns app-fargate
            echo "apiVersion: v1
            kind: Pod
            metadata:
              name: web
              namespace: app-fargate
            spec:
              containers:
              - name: nginx
                image: nginx:latest" > /home/ec2-user/manifests/web_pod.yaml
            echo "apiVersion: v1
            kind: Pod
            metadata:
              name: stress
              namespace: app-fargate
            spec:
              containers:
              - name: curl-loop
                image: curlimages/curl
                # Edit NGINX_POD_IP
                command: ['sh', '-c', 'while true; do curl -s -o /dev/null -w \"%{http_code}\\n\" NGINX_POD_IP; sleep 3; done']
              restartPolicy: Always" > /home/ec2-user/manifests/stress_pod.yaml
            EOF

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionEc2 --region ${AWS::Region}
  BastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Bastion EC2 SSH Connection"
      GroupName: bastion-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 8000
          IpProtocol: tcp
          ToPort: 8000
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: bastion-sg
  BastionEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  BastionEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: Ec2AdminProfile
      Roles: 
        - !Ref BastionEc2IamRole
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]

  EksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: stem-cluster
      Version: !Ref KubernetesVersion
      AccessConfig: 
        AuthenticationMode: API_AND_CONFIG_MAP
        BootstrapClusterCreatorAdminPermissions: true
      BootstrapSelfManagedAddons: true
      Logging: 
        ClusterLogging: 
          EnabledTypes: 
            - Type: api
            - Type: audit
            - Type: authenticator
            - Type: controllerManager
            - Type: scheduler
      ResourcesVpcConfig: 
        EndpointPrivateAccess: true
        EndpointPublicAccess: false
        # PublicAccessCidrs:
        #   - !Sub
        #     - "${PublicIp}/32"
        #     - PublicIp: !GetAtt BastionEc2ElasticIP.PublicIp
        SubnetIds: 
          - !Ref PublicSubneta
          - !Ref PublicSubnetb
          - !Ref PrivateSubneta
          - !Ref PrivateSubnetb
      RoleArn: !GetAtt EksClusterIamRole.Arn
  EksClusterIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
  EksClusterAccessEntry:
    # To manage your EKS Cluster using 'kubectl' commands inside a Bastion EC2 
    Type: AWS::EKS::AccessEntry
    Properties:
      AccessPolicies: 
        - AccessScope: 
            Type: cluster
          PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
      ClusterName: !Ref EksCluster
      PrincipalArn: !GetAtt BastionEc2IamRole.Arn
      Type: STANDARD
  
  FargateProfile:
    Type: AWS::EKS::FargateProfile
    Properties:
      ClusterName: !Ref EksCluster
      FargateProfileName: app-fargate
      PodExecutionRoleArn: !GetAtt FargatePodExecutionRole.Arn
      Subnets: 
        - !Ref PrivateSubneta
        - !Ref PrivateSubnetb
      Selectors: 
        - Namespace: app-fargate
          # Labels: 
          #     - Key: String
          #       Value: String
  FargatePodExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks-fargate-pods.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:eks:${AWS::Region}:${AWS::AccountId}:fargateprofile/${EksCluster}/*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy
      Policies:
        - PolicyName: FargatePodExecutionOpenSearchPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: OpenSearchAccess
                Effect: Allow
                Action:
                  - es:*
                Resource: "*"

  OpenSearchDomain:
    Type: AWS::OpenSearchService::Domain
    DeletionPolicy: Delete
    Properties:
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: es:ESHttp*
            Resource: "*"
            # Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*
      AdvancedOptions: 
        indices.fielddata.cache.size: "20"
        indices.query.bool.max_clause_count: "1024"
        override_main_response_version: "false"
        rest.action.multi.allow_explicit_index: "true"
      ClusterConfig:
        DedicatedMasterEnabled: False
        InstanceCount: 1
        InstanceType: m5.large.search
        WarmEnabled: False
        ZoneAwarenessEnabled: False
      CognitoOptions: 
        Enabled: false
      DomainEndpointOptions: 
        EnforceHTTPS: True
        TLSSecurityPolicy: Policy-Min-TLS-1-2-2019-07
      EBSOptions: 
        EBSEnabled: True
        Iops: 3000
        VolumeSize: 50
        VolumeType: gp3
      # EncryptionAtRestOptions: 
      #   Enabled: True
      #   KmsKeyId: 
      EngineVersion: OpenSearch_2.19
      NodeToNodeEncryptionOptions: 
        Enabled: True
      SoftwareUpdateOptions: 
        AutoSoftwareUpdateEnabled: True
      VPCOptions: 
        SecurityGroupIds: 
          - !GetAtt EksCluster.ClusterSecurityGroupId
        SubnetIds: 
          - !Ref PrivateSubneta


Outputs:
  BastionEc2PublicIP:
    Description: "Public IP Address of the VS Code Server EC2 instance"
    Value: !Sub "http://${BastionEc2.PublicIp}:8000"