AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template"

# Parameters:
#   KeyPair: 
#     Description: EC2 Key Pair
#     Type: AWS::EC2::KeyPair::KeyName

Mappings:
  RegionMap:
    us-east-1:
      AmazonLinux2023: ami-0005e0cfe09cc9050
    ap-northeast-2:
      AmazonLinux2023: ami-0bfd23bc25c60d5a1

Resources:
  OriginS3Bucket:
    DeletionPolicy: RetainExceptOnCreate
    Type: AWS::S3::Bucket
  OriginS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref OriginS3Bucket
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${OriginS3Bucket}/*'
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFront}"
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub "key-${AWS::StackId}"
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      Tags: 
        - Key : Name
          Value : wsi-vpc
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 10.1.2.0/24
      Tags: 
        - Key : Name
          Value : wsi-public-a
      VpcId: !Ref Vpc
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: 10.1.3.0/24
      Tags: 
        - Key : Name
          Value : wsi-public-b
      VpcId: !Ref Vpc
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 10.1.0.0/24
      Tags: 
        - Key : Name
          Value : wsi-private-a
      VpcId: !Ref Vpc
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: 10.1.1.0/24
      Tags: 
        - Key : Name
          Value : wsi-private-b
      VpcId: !Ref Vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: wsi-igw
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  NatGatewayAElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
        - Key : Name
          Value : wsi-natgw-a
  NatGatewayBElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags: 
        - Key : Name
          Value : wsi-natgw-b
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : wsi-public-rt
      VpcId: !Ref Vpc
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetB
  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : wsi-private-a-rt
      VpcId: !Ref Vpc
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetARoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateSubnetARouteTable
  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : wsi-private-b-rt
      VpcId: !Ref Vpc
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetBRouteTable
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetBRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref PrivateSubnetBRouteTable
  BastionEc2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2023]
      InstanceType: t3.small
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetA
          GroupSet: 
            - !Ref BastionEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: wsi-bastion-ec2
      IamInstanceProfile: !Ref BastionEc2InstanceProfile
      UserData:
        Fn::Base64:
            !Sub |
              #!/bin/bash -xe
              exec > >(sudo tee /var/log/user-data.log|sudo sh -c "logger -t user-data -s 2>/dev/console") 2>&1
              aws s3 cp s3://skills-seoul19990731/day1-2021/index.html ./
              aws s3 cp ./index.html s3://${OriginS3Bucket}/index.html
  BastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Bastion EC2 SSH Connection"
      GroupName: bastion-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref Vpc
  BastionEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
      RoleName: Ec2PowerUserRole
  BastionEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: Ec2PowerUserProfile
      Roles: 
        - !Ref BastionEc2IamRole
  AutoScalingGroupIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: GetS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - cloudwatch:PutMetricData
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutRetentionPolicy
                  - ec2:DescribeVolumes
                  - ec2:DescribeTags
                Resource: '*'
      RoleName: Ec2GetS3Role
  AutoScalingGroupInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: Ec2GetS3Profile
      Roles: 
        - !Ref AutoScalingGroupIamRole
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData: 
        IamInstanceProfile:
          Arn: !GetAtt AutoScalingGroupInstanceProfile.Arn
        ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2023]
        InstanceType: t3.small
        KeyName: !Ref KeyPair
        NetworkInterfaces: 
          - DeviceIndex: 0
            Groups: 
              - !Ref AutoScalingGroupSecurityGroup
        TagSpecifications: 
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: wsi-web-api-asg
        UserData: 
          Fn::Base64:
            !Sub |
              #!/bin/bash -xe
              exec > >(sudo tee /var/log/user-data.log|sudo sh -c "logger -t user-data -s 2>/dev/console") 2>&1
              dnf update -y
              dnf install -y python3-pip amazon-cloudwatch-agent
              aws s3 cp s3://skills-seoul19990731/day1-2021/app.py ./
              python3 -m pip install flask
              sudo mkdir -p /var/log/app
              sudo chmod 777 /var/log/app
              nohup python3 app.py &
              echo '{
                "agent": {
                  "run_as_user": "root"
                },
                "logs": {
                  "logs_collected": {
                    "files": {
                      "collect_list": [
                        {
                          "file_path": "/var/log/app/app.log",
                          "log_group_name": "/aws/ec2/wsi",
                          "log_stream_name": "api_{instance_id}",
                          "retention_in_days": -1
                        }
                      ]
                    }
                  }
                },
                "metrics": {
                  "metrics_collected": {
                    "collectd": {
                      "metrics_aggregation_interval": 60
                    },
                    "statsd": {
                      "metrics_aggregation_interval": 60,
                      "metrics_collection_interval": 10,
                      "service_address": ":8125"
                    }
                  }
                }
              }' > /home/ec2-user/config.json
              mkdir -p /usr/share/collectd/
              touch /usr/share/collectd/types.db
              /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/home/ec2-user/config.json
      LaunchTemplateName: wsi-web-api-template
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: wsi-web-api-asg
      AvailabilityZones: 
        - !Sub "${AWS::Region}a"
        - !Sub "${AWS::Region}b"
      LaunchTemplate: 
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: 4
      MinSize: 2
      TargetGroupARNs: 
        - !Ref TargetGroup
      VPCZoneIdentifier: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
  AutoScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: PercentChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration: 
        PredefinedMetricSpecification: 
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 30
  AutoScalingGroupSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for AutoScalingGroup EC2"
      GroupName: asg-sg
      SecurityGroupIngress: 
        - FromPort: 22
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref BastionEc2SecurityGroup
          ToPort: 22
        - FromPort: 8080
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref BastionEc2SecurityGroup
          ToPort: 8080
        - FromPort: 8080
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ApplicationLoadBalancerSecurityGroup
          ToPort: 8080
      VpcId: !Ref Vpc
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: wsi-web-api-alb
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref ApplicationLoadBalancerSecurityGroup
      Subnets: 
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Type: application
  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Application Load Balancer"
      GroupName: alb-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref Vpc
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !GetAtt ApplicationLoadBalancer.LoadBalancerArn
      Port: 80
      Protocol: HTTP
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: wsi-tg
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc
  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior: 
          AllowedMethods: 
            - GET
            - HEAD
          CachedMethods: 
            - GET
            - HEAD
          CachePolicyId: !Ref CloudFrontCachingOptimizedPolicy
          TargetOriginId: S3Static
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - AllowedMethods: 
              - GET
              - HEAD
            CachedMethods: 
              - GET
              - HEAD
            CachePolicyId: !Ref CloudFrontCachingDisabledPolicy
            OriginRequestPolicyId: !Ref CloudFrontOriginRequestPolicy
            PathPattern: v1/*
            TargetOriginId: AlbApi
            ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: True
        HttpVersion: http1.1
        IPV6Enabled: False
        Origins: 
          - DomainName: 
              !Sub 
                - '${S3BucketName}.s3.${AWS::Region}.amazonaws.com'
                - S3BucketName: !Ref OriginS3Bucket
            Id: S3Static
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ''
          - DomainName: !GetAtt ApplicationLoadBalancer.DNSName
            Id: AlbApi
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        PriceClass: PriceClass_All
        Staging: False
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig: 
        Name: CloudFrontOriginAccessControl
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  CloudFrontCachingOptimizedPolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig: 
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name: CloudFrontCachingOptimizedPolicy
        ParametersInCacheKeyAndForwardedToOrigin: 
          CookiesConfig: 
            CookieBehavior: none
          EnableAcceptEncodingBrotli: True
          EnableAcceptEncodingGzip: True
          HeadersConfig: 
            HeaderBehavior: none
          QueryStringsConfig: 
            QueryStringBehavior: none
  CloudFrontCachingDisabledPolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig: 
        DefaultTTL: 0
        MaxTTL: 0
        MinTTL: 0
        Name: CloudFrontCachingDisabledPolicy
        ParametersInCacheKeyAndForwardedToOrigin: 
          CookiesConfig: 
            CookieBehavior: none
          EnableAcceptEncodingBrotli: False
          EnableAcceptEncodingGzip: False
          HeadersConfig: 
            HeaderBehavior: none
          QueryStringsConfig: 
            QueryStringBehavior: none
  CloudFrontOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig: 
        CookiesConfig: 
          CookieBehavior: none
        HeadersConfig: 
          HeaderBehavior: none
        Name: CloudFrontOriginRequestPolicy
        QueryStringsConfig: 
          QueryStringBehavior: whitelist
          QueryStrings: 
            - name
            - hash
  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardBody: 
        !Sub 
          - |
            {
              "widgets": [
                {
                  "height": 10,
                  "width": 10,
                  "y": 0,
                  "x": 0,
                  "type": "metric",
                  "properties": {
                    "metrics": [
                      [ "AWS/ApplicationELB", "HTTPCode_Target_5XX_Count", "LoadBalancer", "${AlbFullName}", { "region": "${AWS::Region}" } ],
                      [ "AWS/ELB", "HTTPCode_ELB_5XX", "LoadBalancerName", "wsi-web-api-alb", { "region": "${AWS::Region}" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "Sum",
                    "period": 300,
                    "title": "HTTP_ERROR",
                    "start": "-PT3H"
                  }
                },
                {
                  "height": 10,
                  "width": 10,
                  "y": 0,
                  "x": 10,
                  "type": "metric",
                  "properties": {
                      "metrics": [
                          [ "AWS/ApplicationELB", "RequestCount", "TargetGroup", "${TgFullName}", "LoadBalancer", "${AlbFullName}", { "region": "${AWS::Region}" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "period": 300,
                      "stat": "Sum",
                      "title": "HTTP_COUNT"
                  }
                },
                {
                  "height": 10,
                  "width": 10,
                  "y": 10,
                  "x": 0,
                  "type": "metric",
                  "properties": {
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                        [ "AWS/ApplicationELB", "TargetResponseTime", "LoadBalancer", "${AlbFullName}" ]
                    ],
                    "region": "${AWS::Region}",
                    "title": "RESPONSE_TIME"
                  }
                },
                {
                  "height": 10,
                  "width": 10,
                  "y": 10,
                  "x": 10,
                  "type": "metric",
                  "properties": {
                    "view": "timeSeries",
                    "stacked": false,
                    "metrics": [
                      [ "AWS/EC2", "CPUUtilization", "AutoScalingGroupName", "wsi-web-api-asg" ]
                    ],
                    "region": "${AWS::Region}",
                    "title": "API_CPU"
                  }
                }
              ]
            }
          - AlbFullName: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
            TgFullName: !GetAtt TargetGroup.TargetGroupFullName
      DashboardName: WSI_API