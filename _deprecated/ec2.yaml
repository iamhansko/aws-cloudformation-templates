AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template"

Mappings:
  RegionMap:
    us-east-1:
      AmazonLinux2023: ami-0182f373e66f89c85
    ap-northeast-2:
      AmazonLinux2023: ami-0023481579962abd4
  ResourceMap:
    Vpc:
      Name : stem-vpc
      CidrBlock: 10.1.0.0/16
    PublicSubnet:
      Name: stem-public
    PrivateSubnet:
      Name: stem-private
    InternetGateway:
      Name: stem-igw
    NatGateway:
      Name: stem-natgw
    PublicEc2:
      Name: stem-public-ec2
      InstanceType: t3.small
    PrivateEc2:
      Name: stem-private-ec2
      InstanceType: t3.small

Resources:
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ResourceMap, Vpc, CidrBlock]
      Tags: 
        - Key : Name
          Value : !FindInMap [ResourceMap, Vpc, Name]
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [0, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "a"]]
      VpcId: !Ref Vpc
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [1, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "b"]]
      VpcId: !Ref Vpc
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [2, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "a"]]
      VpcId: !Ref Vpc
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [3, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "b"]]
      VpcId: !Ref Vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !FindInMap [ResourceMap, InternetGateway, Name]
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  NatGatewayAElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "a"]]
  NatGatewayBElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "b"]]
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "rt"]]
      VpcId: !Ref Vpc
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "a", "rt"]]
      VpcId: !Ref Vpc
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetARoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateSubnetARouteTable
  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "b", "rt"]]
      VpcId: !Ref Vpc
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetBRouteTable
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetBRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref PrivateSubnetBRouteTable
  PublicEc2:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: '1'                
        Timeout: PT15M
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2023]
      InstanceType: !FindInMap [ResourceMap, PublicEc2, InstanceType]
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetA
          GroupSet: 
            - !Ref PublicEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: !FindInMap [ResourceMap, PublicEc2, Name]
      UserData:
        # cat /var/log/cloud-init-output.log
        Fn::Base64:
            !Sub |
              #!/bin/bash
              su - ec2-user <<'EOF'
              sudo dnf update -y
              sudo dnf install -y git
              cd /home/ec2-user
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
              export NVM_DIR="/home/ec2-user/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
              nvm install 20
              git clone https://github.com/iamhansko/find-different-color.git
              cd /home/ec2-user/find-different-color
              npm install
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource PublicEc2 --region ${AWS::Region}
              npm run start
              EOF
  PublicEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Public EC2 SSH Connection"
      GroupName: public-ec2-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 3000
          IpProtocol: tcp
          ToPort: 3000
      VpcId: !Ref Vpc
  PrivateEc2:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: '1'                
        Timeout: PT15M
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2023]
      InstanceType: !FindInMap [ResourceMap, PrivateEc2, InstanceType]
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - DeviceIndex: 0
          SubnetId: !Ref PrivateSubnetA
          GroupSet: 
            - !Ref PrivateEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: !FindInMap [ResourceMap, PrivateEc2, Name]
      UserData:
        # cat /var/log/cloud-init-output.log
        Fn::Base64:
            !Sub |
              #!/bin/bash
              su - ec2-user <<'EOF'
              sudo dnf update -y
              sudo dnf install -y git
              cd /home/ec2-user
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
              export NVM_DIR="/home/ec2-user/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
              nvm install 20
              git clone https://github.com/iamhansko/find-different-color.git
              cd /home/ec2-user/find-different-color
              npm install
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource PrivateEc2 --region ${AWS::Region}
              npm run start
              EOF
  PrivateEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Private EC2 SSH Connection"
      GroupName: private-ec2-sg
      SecurityGroupIngress: 
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref PublicEc2SecurityGroup
        - FromPort: 3000
          ToPort: 3000
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref PublicEc2SecurityGroup
      VpcId: !Ref Vpc




