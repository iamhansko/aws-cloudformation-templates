AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template"

Parameters:
  AmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"

Mappings:
  ResourceMap:
    Vpc:
      Name : stem-vpc
      CidrBlock: 10.0.0.0/16
    PublicSubnet:
      Name: stem-public
    PrivateSubnet:
      Name: stem-private
    InternetGateway:
      Name: stem-igw
    NatGateway:
      Name: stem-natgw
    BastionEc2:
      Name: stem-bastion
      InstanceType: t3.small #c5.large

Resources:
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
  
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: True
      CidrBlock: !FindInMap [ResourceMap, Vpc, CidrBlock]
      Tags: 
        - Key : Name
          Value : !FindInMap [ResourceMap, Vpc, Name]
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [0, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key: Name
          Value: !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "a"]]
        - Key: kubernetes.io/role/internal-elb
          Value: 1
      VpcId: !Ref Vpc
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [1, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key: Name
          Value: !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "b"]]
        - Key: kubernetes.io/role/internal-elb
          Value: 1
      VpcId: !Ref Vpc
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: !Select [2, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "c"]]
        - Key: kubernetes.io/role/internal-elb
          Value: 1
      VpcId: !Ref Vpc
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [3, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key: Name
          Value: !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "a"]]
        - Key: kubernetes.io/role/elb
          Value: 1
      VpcId: !Ref Vpc
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [4, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key: Name
          Value: !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "b"]]
        - Key: kubernetes.io/role/elb
          Value: 1
      VpcId: !Ref Vpc
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: !Select [5, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key: Name
          Value: !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "c"]]
        - Key: kubernetes.io/role/elb
          Value: 1
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !FindInMap [ResourceMap, InternetGateway, Name]
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  NatGatewayAElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "a"]]
  NatGatewayBElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "b"]]
  NatGatewayCElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayCElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetC
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "c"]]
      
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "rt"]]
      VpcId: !Ref Vpc
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetC
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "a", "rt"]]
      VpcId: !Ref Vpc
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetARoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateSubnetARouteTable
  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "b", "rt"]]
      VpcId: !Ref Vpc
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetBRouteTable
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetBRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref PrivateSubnetBRouteTable
  PrivateSubnetCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "c", "rt"]]
      VpcId: !Ref Vpc
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetCRouteTable
      SubnetId: !Ref PrivateSubnetC
  PrivateSubnetCRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayC
      RouteTableId: !Ref PrivateSubnetCRouteTable

  BastionEc2:
    Type: AWS::EC2::Instance
    DependsOn: 
      - EksCluster
    CreationPolicy:
      ResourceSignal:
        Count: '1'                
        Timeout: PT20M
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !FindInMap [ResourceMap, BastionEc2, InstanceType]
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetA
          GroupSet: 
            - !Ref BastionEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: !FindInMap [ResourceMap, BastionEc2, Name]
      IamInstanceProfile: !Ref BastionEc2InstanceProfile
      UserData: 
        # sudo tail -f /var/log/cloud-init-output.log
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            dnf update -y
            dnf install -y git
            dnf groupinstall -y "Development Tools"
            dnf install -y python3.12
            dnf install -y python3-pip
            ln -s /usr/bin/python3.12 /usr/bin/python
            wget https://github.com/coder/code-server/releases/download/v4.93.1/code-server-4.93.1-linux-amd64.tar.gz
            tar -xzf code-server-4.93.1-linux-amd64.tar.gz
            mv code-server-4.93.1-linux-amd64 /usr/local/lib/code-server
            ln -s /usr/local/lib/code-server/bin/code-server /usr/local/bin/code-server
            mkdir -p /home/ec2-user/.config/code-server
            cat <<EOF > /home/ec2-user/.config/code-server/config.yaml
            bind-addr: 0.0.0.0:8000
            auth: none
            cert: false
            EOF
            chown -R ec2-user:ec2-user /home/ec2-user/.config
            cat <<EOF > /etc/systemd/system/code-server.service
            [Unit]
            Description=VS Code Server
            After=network.target
            [Service]
            Type=simple
            User=ec2-user
            ExecStart=/usr/local/bin/code-server --config /home/ec2-user/.config/code-server/config.yaml /home/ec2-user
            Restart=always
            [Install]
            WantedBy=multi-user.target
            EOF
            systemctl daemon-reload
            systemctl enable code-server
            systemctl start code-server

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionEc2 --region ${AWS::Region}
  BastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Bastion EC2 SSH Connection"
      GroupName: bastion-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 8000
          IpProtocol: tcp
          ToPort: 8000
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: bastion-sg
  BastionEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  BastionEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: Ec2AdminProfile
      Roles: 
        - !Ref BastionEc2IamRole

Outputs:
  BastionEc2PublicIP:
    Description: "Public IP Address of the VS Code Server EC2 instance"
    Value: !Sub "http://${BastionEc2.PublicIp}:8000"