AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Lambda Slack App

Parameters:
  SlackClientId:
    Type: String
    Default: ""
  SlackClientSecret:
    Type: String
    Default: ""
  SlackSigningSecret:
    Type: String
    Default: ""

Globals:
  Function:
    Timeout: 480
    MemorySize: 1024
    Environment:
      Variables:
        SLACK_CLIENT_ID: !Ref SlackClientId
        SLACK_CLIENT_SECRET: !Ref SlackClientSecret
        SLACK_SIGNING_SECRET: !Ref SlackSigningSecret
        OAUTH_STATE_S3_BUCKET_NAME: !Ref OauthStateS3Bucket
        INSTALLATION_S3_BUCKET_NAME: !Ref InstallationS3Bucket

Resources:
  OauthStateS3Bucket:
    Type: 'AWS::S3::Bucket' 

  InstallationS3Bucket:
    Type: 'AWS::S3::Bucket'

  AWSLambdaSlackAppFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: SlackAppFunctionPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                    - lambda:InvokeAsync
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:GetObject
                    - s3:GetObjectAcl
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:ReplicateObject
                    - s3:DeleteObject
                  Resource: 
                    - !GetAtt OauthStateS3Bucket.Arn
                    - !Sub "${OauthStateS3Bucket.Arn}/*"
                    - !GetAtt InstallationS3Bucket.Arn
                    - !Sub "${InstallationS3Bucket.Arn}/*"
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - bedrock:*
                  Resource: "*"
  
  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: LambdaLayer
      Description: Python Lambda Layer
      ContentUri: ./layer.zip
      CompatibleRuntimes:
        - python3.12
  
  AWSLambdaSlackAppFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.12
      CodeUri: ./src
      Layers:
        - !Ref LambdaLayer
      Description: Slack App Function
      Role: !GetAtt AWSLambdaSlackAppFunctionRole.Arn
      Events:
        SlackEvents:
          Type: Api
          Properties:
            Path: /slack/events
            Method: POST
        SlackOauthRedirect:
          Type: Api
          Properties:
            Path: /slack/oauth_redirect
            Method: GET
        SlackInstall:
          Type: Api
          Properties:
            Path: /slack/install
            Method: GET

Outputs:
  OauthStateS3Bucket:
    Description: "Oauth State S3 Bucket"
    Value: !GetAtt OauthStateS3Bucket.Arn  
  InstallationS3Bucket:
    Description: "Installation S3 Bucket"
    Value: !GetAtt InstallationS3Bucket.Arn  
  SlackAppFunction:
    Description: "Slack App Function ARN"
    Value: !GetAtt AWSLambdaSlackAppFunction.Arn
  SlackAppFunctionRole:
    Description: "IAM Role for Slack App Function"
    Value: !GetAtt AWSLambdaSlackAppFunctionRole.Arn