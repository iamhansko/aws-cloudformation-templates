AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template"

Resources:
  EksClusterStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "https://iamhanskogithub.s3.ap-southeast-2.amazonaws.com/nested/eksctl_on_ec2/cluster.yaml"
  
  LbcSsmAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name: AWS-RunShellScript
      # WaitForSuccessTimeoutSeconds: 1800
      Targets:
        - Key: InstanceIds
          Values:
            - !GetAtt EksClusterStack.Outputs.Ec2InstanceId
      Parameters:
        commands: 
          - !Sub 
            - |
              su - ec2-user << EOF

              export oidc_id=$(aws eks describe-cluster --name ${EksClusterName} --query "cluster.identity.oidc.issuer" --output text | cut -d '/' -f 5)
              echo $oidc_id
              eksctl utils associate-iam-oidc-provider --region ${AWS::Region} --cluster ${EksClusterName} --approve
              aws iam list-open-id-connect-providers | grep $oidc_id | cut -d "/" -f4

              curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/refs/heads/main/docs/install/iam_policy.json
              aws iam create-policy \
              --policy-name AWSLoadBalancerControllerIAMPolicy-${RandomNumber} \
              --policy-document file://iam_policy.json
              rm iam_policy.json

              eksctl create iamserviceaccount \
              --cluster=${EksClusterName} \
              --namespace=kube-system \
              --name=aws-load-balancer-controller \
              --role-name AmazonEKSLoadBalancerControllerRole-${RandomNumber} \
              --attach-policy-arn="arn:aws:iam::${AWS::AccountId}:policy/AWSLoadBalancerControllerIAMPolicy-${RandomNumber}" \
              --approve --region ${AWS::Region}
              helm repo add eks https://aws.github.io/eks-charts
              helm repo update eks
              helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system \
              --set clusterName=${EksClusterName} \
              --set serviceAccount.create=false \
              --set serviceAccount.name=aws-load-balancer-controller \
              --set region=${AWS::Region} \
              --set vpcId=${VpcId}
              kubectl rollout status -n kube-system deploy aws-load-balancer-controller

              git clone https://codeberg.org/hjacobs/kube-ops-view.git
              cd kube-ops-view/
              kubectl apply -k deploy
              kubectl patch svc kube-ops-view -p "{\"spec\": {\"type\": \"LoadBalancer\"}}"
              EOF
            - EksClusterName: !GetAtt EksClusterStack.Outputs.EksClusterName
              VpcId: !GetAtt EksClusterStack.Outputs.VpcId
              RandomNumber: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]

Outputs:
  CloudFrontDomainName: 
    Value: !GetAtt EksClusterStack.Outputs.CloudFrontDomainName
  EksClusterName:
    Value: !GetAtt EksClusterStack.Outputs.EksClusterName
  Ec2InstanceId:
    Value: !GetAtt EksClusterStack.Outputs.Ec2InstanceId
  Ec2IamRoleArn:
    Value: !GetAtt EksClusterStack.Outputs.Ec2IamRoleArn
  Ec2PublicIp:
    Value: !GetAtt EksClusterStack.Outputs.Ec2PublicIp
  Ec2PublicDnsName:
    Value: !GetAtt EksClusterStack.Outputs.Ec2PublicDnsName
  Ec2SecurityGroup:
    Value: !GetAtt EksClusterStack.Outputs.Ec2SecurityGroup
  VpcId: 
    Value: !GetAtt EksClusterStack.Outputs.VpcId
  PublicSubnet1Id:
    Value: !GetAtt EksClusterStack.Outputs.PublicSubnet1Id
  PublicSubnet2Id:
    Value: !GetAtt EksClusterStack.Outputs.PublicSubnet2Id
  PublicSubnet3Id:
    Value: !GetAtt EksClusterStack.Outputs.PublicSubnet3Id
  PrivateSubnet1Id:
    Value: !GetAtt EksClusterStack.Outputs.PrivateSubnet1Id
  PrivateSubnet2Id:
    Value: !GetAtt EksClusterStack.Outputs.PrivateSubnet2Id
  PrivateSubnet3Id:
    Value: !GetAtt EksClusterStack.Outputs.PrivateSubnet3Id