Transform: AWS::LanguageExtensions
Parameters:
  InboundFromAnywhere:
    Type: String
    Default: "False"
    AllowedValues: ["True", "False"]
    Description: SeucirtyGroup Inbound Rule (Source 0.0.0.0/0)
  KubernetesVersion:
    Description: EKS Cluster Kubernetes Version (1.XX)
    Type: String
    Default: "1.34"
    AllowedValues: ["1.31", "1.32", "1.33", "1.34"]
  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
Conditions:
  SecurityGroupInboundFromAnywhere: !Equals [!Ref InboundFromAnywhere, "True"]

Mappings:
  AzMapping: 
    a:
      PublicSubnetCidr: 10.0.0.0/24
      PrivateSubnetCidr: 10.0.1.0/24
    b: 
      PublicSubnetCidr: 10.0.2.0/24
      PrivateSubnetCidr: 10.0.3.0/24
    c: 
      PublicSubnetCidr: 10.0.4.0/24
      PrivateSubnetCidr: 10.0.5.0/24

Resources:
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
  
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: igw
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: public-rt
      VpcId: !Ref Vpc
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable

  # PublicSubnets
  Fn::ForEach::PublicSubnets:
    - Az
    - [a, b]
    - PublicSubnet${Az}:
        Type: AWS::EC2::Subnet
        Properties:
          AvailabilityZone: !Sub ${AWS::Region}${Az}
          CidrBlock: !FindInMap [AzMapping, !Ref Az, PublicSubnetCidr]
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: !Sub public-subnet-${Az}
          VpcId: !Ref Vpc
      PublicSubnet${Az}RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PublicSubnetRouteTable
          SubnetId:
            Ref: !Sub PublicSubnet${Az}
  
  # PrivateSubnets
  Fn::ForEach::PrivateSubnets:
    - Az
    - [a, b]
    - PrivateSubnet${Az}:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref Vpc
          CidrBlock: !FindInMap [AzMapping, !Ref Az, PrivateSubnetCidr]
          AvailabilityZone: !Sub ${AWS::Region}${Az}
          Tags:
            - Key: Name
              Value: !Sub private-subnet-${Az}
      PrivateSubnet${Az}RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref Vpc
          Tags:
            - Key: Name
              Value: !Sub private-rt-${Az}
      Natgateway${Az}ElasticIp:
        Type: AWS::EC2::EIP
      NatGateway${Az}:
        Type: AWS::EC2::NatGateway
        Properties:
          AllocationId: !GetAtt
            - !Sub Natgateway${Az}ElasticIp
            - AllocationId
          SubnetId:
            Ref: !Sub PublicSubnet${Az}
          Tags: 
            - Key : Name
              Value : !Sub natgw-${Az}
      PrivateSubnet${Az}RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId:
            Ref: !Sub PrivateSubnet${Az}RouteTable
          SubnetId: 
            Ref: !Sub PrivateSubnet${Az}
      PrivateSubnet${Az}Route:
        Type: AWS::EC2::Route
        Properties:
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId:
            Ref: !Sub NatGateway${Az}
          RouteTableId:
            Ref: !Sub PrivateSubnet${Az}RouteTable

  VsCodeEc2:
    Type: AWS::EC2::Instance
    DependsOn:
      - IMDSNodeGroup
      - IRSANodeGroup
      - IRSAIamRole
      - PodIdentityNodeGroup
      - PodIdentityAssociation
    CreationPolicy:
      ResourceSignal:
        Count: '1'                
        Timeout: PT7M
    Properties:
      ImageId: !Ref AmiId
      InstanceType: t3.medium
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubneta
          GroupSet: 
            - !GetAtt IMDS.ClusterSecurityGroupId
            - !GetAtt IRSA.ClusterSecurityGroupId
            - !GetAtt PodIdentity.ClusterSecurityGroupId
            - !Ref VsCodeEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: vscode
      IamInstanceProfile: !Ref VsCodeEc2InstanceProfile
      UserData: 
        # sudo tail -f /var/log/cloud-init-output.log
        Fn::Base64: !Sub |
          #!/bin/bash
          dnf update -yq
          dnf install -yq git
          dnf groupinstall -yq "Development Tools"

          export VSC_VERSION="4.105.1"
          wget https://github.com/coder/code-server/releases/download/v$VSC_VERSION/code-server-$VSC_VERSION-linux-amd64.tar.gz
          tar -xzf code-server-$VSC_VERSION-linux-amd64.tar.gz
          mv code-server-$VSC_VERSION-linux-amd64 /usr/local/lib/code-server
          ln -s /usr/local/lib/code-server/bin/code-server /usr/local/bin/code-server
          mkdir -p /home/ec2-user/.config/code-server
          cat <<EOF > /home/ec2-user/.config/code-server/config.yaml
          bind-addr: 0.0.0.0:8000
          auth: none
          cert: false
          EOF
          chown -R ec2-user:ec2-user /home/ec2-user/.config
          cat <<EOF > /etc/systemd/system/code-server.service
          [Unit]
          Description=VS Code Server
          After=network.target
          [Service]
          Type=simple
          User=ec2-user
          ExecStart=/usr/local/bin/code-server --config /home/ec2-user/.config/code-server/config.yaml /home/ec2-user
          Restart=always
          [Install]
          WantedBy=multi-user.target
          EOF
          systemctl daemon-reload
          systemctl enable code-server
          systemctl start code-server

          sudo -Eu ec2-user bash << 'EOF'
          cd /home/ec2-user
          mkdir -p /home/ec2-user/bin
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.33.3/2025-08-03/bin/linux/amd64/kubectl
          chmod +x kubectl
          mv kubectl /home/ec2-user/bin/kubectl
          export PATH=/home/ec2-user/bin:$PATH
          echo "export PATH=/home/ec2-user/bin:$PATH" >> ~/.bashrc
          echo "alias k=kubectl" >> ~/.bashrc
          echo "complete -o default -F __start_kubectl k" >> ~/.bashrc
          echo "source <(kubectl completion bash)" >> ~/.bashrc
          exec bash

          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > /home/ec2-user/get_helm.sh
          chmod 700 /home/ec2-user/get_helm.sh
          /home/ec2-user/get_helm.sh
          rm /home/ec2-user/get_helm.sh

          mkdir -p /home/ec2-user/manifests
          echo 'apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: cli-sa' > manifests/sa.yaml
          echo 'apiVersion: v1
          kind: Pod
          metadata:
            name: cli
          spec:
            containers:
            - image: amazon/aws-cli
              name: cli
              command: ["tail"]
              args: ["-f", "/dev/null"]
            dnsPolicy: ClusterFirst
            restartPolicy: Always
            hostNetwork: false
            serviceAccountName: cli-sa' > manifests/pod.yaml

          aws eks update-kubeconfig --region ${AWS::Region} --name ${IMDS} --alias imds
          kubectl apply -f manifests/sa.yaml
          kubectl apply -f manifests/pod.yaml

          aws eks update-kubeconfig --region ${AWS::Region} --name ${IRSA} --alias irsa
          kubectl apply -f manifests/sa.yaml
          kubectl annotate serviceaccount cli-sa "eks.amazonaws.com/role-arn"="${IRSAIamRole.Arn}"
          kubectl apply -f manifests/pod.yaml

          aws eks update-kubeconfig --region ${AWS::Region} --name ${PodIdentity} --alias podidentity
          kubectl apply -f manifests/sa.yaml
          kubectl apply -f manifests/pod.yaml

          echo '# Kubectl Commands
          
          kubectl config use-context imds
          
          kubectl config use-context irsa
          
          kubectl config use-context podidentity

          kubectl exec -it cli -- sh' > /home/ec2-user/manifests/README.md

          EOF

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource VsCodeEc2 --region ${AWS::Region}
  VsCodeEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      GroupName: vscode-sg
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        !If [SecurityGroupInboundFromAnywhere, [{
          "IpProtocol": "tcp",
          "FromPort": 8000,
          "ToPort": 8000,
          "CidrIp": "0.0.0.0/0"
        }], []]
      Tags:
        - Key: Name
          Value: vscode-sg
  VsCodeEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  VsCodeEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: 
        - !Ref VsCodeEc2IamRole

  EksClusterIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
  
  EksNodeIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # EksClusters
  Fn::ForEach::Clusters:
    - Prefix
    - [IMDS, IRSA, PodIdentity]
    - ${Prefix}:
        Type: AWS::EKS::Cluster
        Properties:
          Version: !Ref KubernetesVersion
          AccessConfig: 
            AuthenticationMode: API_AND_CONFIG_MAP
            BootstrapClusterCreatorAdminPermissions: true
          BootstrapSelfManagedAddons: false
          Logging: 
            ClusterLogging: 
              EnabledTypes: 
                - Type: api
                - Type: audit
                - Type: authenticator
                - Type: controllerManager
                - Type: scheduler
          ResourcesVpcConfig: 
            EndpointPrivateAccess: true
            EndpointPublicAccess: true
            SubnetIds: 
              - !Ref PublicSubneta
              - !Ref PublicSubnetb
              - !Ref PrivateSubneta
              - !Ref PrivateSubnetb
          RoleArn: !GetAtt EksClusterIamRole.Arn
          KubernetesNetworkConfig:
            IpFamily: ipv4
            ServiceIpv4Cidr: 172.20.0.0/16
      ${Prefix}VsCodeEc2IamAccessEntry:
        Type: AWS::EKS::AccessEntry
        Properties:
          AccessPolicies: 
            - AccessScope: 
                Type: cluster
              PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
          ClusterName:
            Ref: !Sub ${Prefix}
          PrincipalArn: !GetAtt VsCodeEc2IamRole.Arn
          Type: STANDARD
      ${Prefix}EksOidcProvider:
        Type: AWS::IAM::OIDCProvider
        Properties:
          Url: !GetAtt 
            - !Ref Prefix
            - OpenIdConnectIssuerUrl
          ClientIdList: 
            - sts.amazonaws.com
      ${Prefix}VpcCniAddOn:
        Type: AWS::EKS::Addon
        Properties:
          AddonName: vpc-cni
          ClusterName:
            Ref: !Sub ${Prefix}
          ResolveConflicts: OVERWRITE
      ${Prefix}KubeProxyAddOn:
        Type: AWS::EKS::Addon
        Properties:
          AddonName: kube-proxy
          ClusterName:
            Ref: !Sub ${Prefix}
          ResolveConflicts: OVERWRITE
      ${Prefix}CoreDnsAddOn:
        Type: AWS::EKS::Addon
        Properties:
          AddonName: coredns
          ClusterName:
            Ref: !Sub ${Prefix}
          ResolveConflicts: OVERWRITE
      ${Prefix}PodIdentityAgentAddon:
        Type: AWS::EKS::Addon
        Properties:
          AddonName: eks-pod-identity-agent
          ClusterName:
            Ref: !Sub ${Prefix}
          ResolveConflicts: OVERWRITE
      ${Prefix}NodeGroup:
        Type: AWS::EKS::Nodegroup
        Properties:
          NodegroupName: al2023
          AmiType: AL2023_x86_64_STANDARD
          InstanceTypes: 
            - t3.medium #c5.large
          CapacityType: ON_DEMAND
          ClusterName:
            Ref: !Sub ${Prefix}
          ForceUpdateEnabled: true
          NodeRole: !GetAtt EksNodeIamRole.Arn
          ScalingConfig: 
            DesiredSize: 1
            MaxSize: 1
            MinSize: 1
          Subnets: 
            - !Ref PrivateSubneta
            - !Ref PrivateSubnetb
          LaunchTemplate:
            Id: 
              Ref: !Sub ${Prefix}LaunchTemplate
      ${Prefix}LaunchTemplate:
        Type: AWS::EC2::LaunchTemplate
        Properties:
          LaunchTemplateData: 
            KeyName: !Ref KeyPair
            SecurityGroupIds: 
              - !GetAtt 
                  - !Ref Prefix
                  - ClusterSecurityGroupId
            TagSpecifications: 
              - ResourceType: instance
                Tags: 
                  - Key: Name
                    Value: !Ref Prefix

  PodIdentityAssociation:
    Type: AWS::EKS::PodIdentityAssociation
    Properties:
      ClusterName: !Ref PodIdentity
      Namespace: default
      RoleArn: !GetAtt PodIdentityIamRole.Arn
      ServiceAccount: cli-sa
  PodIdentityIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: pods.eks.amazonaws.com
            Action:
              - sts:AssumeRole
              - sts:TagSession
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  
  IRSAIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: !Sub
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Federated": "${IRSAEksOidcProvider.Arn}"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                        "StringEquals": {
                            "${OidcProvider}:sub": "system:serviceaccount:default:cli-sa",
                            "${OidcProvider}:aud": "sts.amazonaws.com"
                        }
                    }
                }
            ]
          }
        - OidcProvider: !Select [1, !Split ["//", !GetAtt IRSA.OpenIdConnectIssuerUrl]]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  
  S3Bucket:
    Type: AWS::S3::Bucket

Outputs:
  VsCode:
    Value: !Sub http://${VsCodeEc2.PublicIp}:8000
    Description: Public IP Address of the VS Code