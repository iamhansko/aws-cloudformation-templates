AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template"

Mappings:
  RegionMap:
    us-east-1:
      AmazonLinux2023: ami-0b72821e2f351e396
    ap-northeast-2:
      AmazonLinux2023: ami-04ea5b2d3c8ceccf8
  ResourceMap:
    Vpc:
      Name : stem-vpc
      CidrBlock: 10.0.0.0/16
    PublicSubnet:
      Name: stem-public
    PrivateSubnet:
      Name: stem-private
    InternetGateway:
      Name: stem-igw
    NatGateway:
      Name: stem-natgw
    BastionEc2:
      Name: stem-bastion
      InstanceType: t3.small #c5.large

Resources:
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
  
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: True
      CidrBlock: !FindInMap [ResourceMap, Vpc, CidrBlock]
      Tags: 
        - Key : Name
          Value : !FindInMap [ResourceMap, Vpc, Name]
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [0, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key: Name
          Value: !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "a"]]
        - Key: kubernetes.io/role/internal-elb
          Value: 1
      VpcId: !Ref Vpc
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [1, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key: Name
          Value: !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "b"]]
        - Key: kubernetes.io/role/internal-elb
          Value: 1
      VpcId: !Ref Vpc
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: !Select [2, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "c"]]
        - Key: kubernetes.io/role/internal-elb
          Value: 1
      VpcId: !Ref Vpc
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [3, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key: Name
          Value: !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "a"]]
        - Key: kubernetes.io/role/elb
          Value: 1
      VpcId: !Ref Vpc
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [4, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key: Name
          Value: !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "b"]]
        - Key: kubernetes.io/role/elb
          Value: 1
      VpcId: !Ref Vpc
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: !Select [5, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key: Name
          Value: !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "c"]]
        - Key: kubernetes.io/role/elb
          Value: 1
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !FindInMap [ResourceMap, InternetGateway, Name]
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  NatGatewayAElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "a"]]
  NatGatewayBElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "b"]]
  NatGatewayCElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayCElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetC
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "c"]]
      
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "rt"]]
      VpcId: !Ref Vpc
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetC
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "a", "rt"]]
      VpcId: !Ref Vpc
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetARoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateSubnetARouteTable
  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "b", "rt"]]
      VpcId: !Ref Vpc
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetBRouteTable
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetBRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref PrivateSubnetBRouteTable
  PrivateSubnetCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "c", "rt"]]
      VpcId: !Ref Vpc
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetCRouteTable
      SubnetId: !Ref PrivateSubnetC
  PrivateSubnetCRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayC
      RouteTableId: !Ref PrivateSubnetCRouteTable

  BastionEc2:
    Type: AWS::EC2::Instance
    DependsOn: 
      - EksCluster
    CreationPolicy:
      ResourceSignal:
        Count: '1'                
        Timeout: PT20M
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2023]
      InstanceType: !FindInMap [ResourceMap, BastionEc2, InstanceType]
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetA
          GroupSet: 
            - !Ref BastionEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: !FindInMap [ResourceMap, BastionEc2, Name]
      IamInstanceProfile: !Ref BastionEc2InstanceProfile
      UserData: 
        # sudo tail -f /var/log/cloud-init-output.log
        Fn::Base64: 
          !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            dnf update -y
            dnf install docker -y
            systemctl start docker
            systemctl enable docker
            usermod -aG docker ec2-user
            newgrp docker

            mkdir -p /home/ec2-user/match

            echo 'package main
            import (
              "encoding/json"
              "fmt"
              "log"
              "net/http"
              "strings"
            )
            type Response struct {
                STATUS   string `json:"status"`
            }
            func main() {
              http.HandleFunc("/v1/match", func(w http.ResponseWriter, r *http.Request) {
                token := r.URL.Query().Get("token")
                response := Response{}
                response.STATUS = "FAIL"
                w.Header().Add("content-type", "application/json")

                if len(token) <= 8 && strings.Count(token, string(token[0])) == len(token) {
                  response.STATUS = "OK"
                }

                data, _ := json.Marshal(response)
                w.WriteHeader(http.StatusOK)
                fmt.Fprint(w, string(data))
              })

              http.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
                response := Response{}
                response.STATUS = "OK"
                w.Header().Add("content-type", "application/json")
                data, _ := json.Marshal(response)
                w.WriteHeader(http.StatusOK)
                fmt.Fprint(w, string(data))
              })
                log.Println("Start server")
              http.ListenAndServe(":8080", nil)
            }' > /home/ec2-user/match/match.go
            echo 'FROM golang:1.16 AS build
            WORKDIR /source
            COPY match.go ./
            RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o match match.go
            FROM alpine
            WORKDIR /app
            RUN apk --no-cache add ca-certificates && apk --no-cache upgrade
            COPY --from=build /source/match ./
            RUN chmod +x ./match
            RUN adduser -D appuser
            RUN chown appuser:appuser ./match
            USER appuser
            ENTRYPOINT ["./match"]' > /home/ec2-user/match/Dockerfile
            aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            MATCH_IMAGE_TAG=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Ecr}:latest
            docker build -t $MATCH_IMAGE_TAG /home/ec2-user/match
            docker push $MATCH_IMAGE_TAG

            sudo -Eu ec2-user bash << 'EOF'
            cd /home/ec2-user
            mkdir -p /home/ec2-user/bin
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.30.0/2024-05-12/bin/linux/amd64/kubectl
            chmod +x kubectl
            mv kubectl /home/ec2-user/bin/kubectl
            export PATH=/home/ec2-user/bin:$PATH
            echo "export PATH=/home/ec2-user/bin:$PATH" >> ~/.bashrc
            echo "alias k=kubectl" >>~/.bashrc
            echo "complete -o default -F __start_kubectl k" >>~/.bashrc
            echo "source <(kubectl completion bash)" >>~/.bashrc
            exec bash
            aws eks update-kubeconfig --region ${AWS::Region} --name ${EksCluster}

            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            aws configure set region ${AWS::Region}
            eksctl utils associate-iam-oidc-provider --cluster ${EksCluster} --approve --region ${AWS::Region}

            sudo dnf install -y git
            curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > /home/ec2-user/get_helm.sh
            chmod 700 /home/ec2-user/get_helm.sh
            /home/ec2-user/get_helm.sh

            sleep 10
            eksctl create iamserviceaccount \
            --cluster=${EksCluster} \
            --namespace=kube-system \
            --name=aws-load-balancer-controller \
            --role-name AmazonEKSLoadBalancerControllerRole \
            --attach-policy-arn=${AWSLoadBalancerControllerIAMPolicy} \
            --approve --region ${AWS::Region}
            helm repo add eks https://aws.github.io/eks-charts
            helm repo update eks
            helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system \
            --set clusterName=${EksCluster} \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller \
            --set region=${AWS::Region} \
            --set vpcId=${Vpc}
            kubectl rollout status -n kube-system deploy aws-load-balancer-controller
            sleep 10

            mkdir -p ~/environment/cluster-autoscaler
            eksctl create iamserviceaccount \
                --name cluster-autoscaler \
                --namespace kube-system \
                --cluster ${EksCluster} \
                --attach-policy-arn "${AmazonEKSClusterAutoscalerPolicy}" \
                --approve \
                --override-existing-serviceaccounts
            kubectl -n kube-system describe sa cluster-autoscaler
            curl -o ~/environment/cluster-autoscaler/cluster-autoscaler-autodiscover.yaml https://raw.githubusercontent.com/kubernetes/autoscaler/master/cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml

            sed -i "s/<YOUR CLUSTER NAME>/${EksCluster}/g" ~/environment/cluster-autoscaler/cluster-autoscaler-autodiscover.yaml
            kubectl apply -f ~/environment/cluster-autoscaler/cluster-autoscaler-autodiscover.yaml
            kubectl -n kube-system annotate deployment.apps/cluster-autoscaler cluster-autoscaler.kubernetes.io/safe-to-evict="false"
            K8S_VERSION=$(kubectl version | grep "Server Version:" | sed "s/[^0-9.]*\([0-9.]*\).*/\1/" | cut -d. -f1,2)
            AUTOSCALER_VERSION=$(curl -s "https://api.github.com/repos/kubernetes/autoscaler/releases" | grep "\"tag_name\":" | sed -s "s/.*-\([0-9][0-9\.]*\).*/\1/" | grep -m1 $K8S_VERSION)
            echo $AUTOSCALER_VERSION
            kubectl -n kube-system \
            set image deployment.apps/cluster-autoscaler \
            cluster-autoscaler="registry.k8s.io/autoscaling/cluster-autoscaler:v$AUTOSCALER_VERSION"
            kubectl rollout status -n kube-system deploy cluster-autoscaler
            sleep 10

            kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

            kubectl create deployment php-apache --image=us.gcr.io/k8s-artifacts-prod/hpa-example
            kubectl set resources deploy php-apache --requests=cpu=200m
            kubectl expose deploy php-apache --port 80
            kubectl autoscale deployment php-apache --cpu-percent=60 --min=1 --max=10
            
            git clone https://codeberg.org/hjacobs/kube-ops-view.git
            cd kube-ops-view/
            kubectl apply -k deploy
            kubectl patch svc kube-ops-view -p "{\"spec\": {\"type\": \"LoadBalancer\"}}"
            kubectl run load-generator --image=busybox -- /bin/sh -c "while true; do wget -q -O - http://php-apache; done"
            EOF
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionEc2 --region ${AWS::Region}
  BastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Bastion EC2 SSH Connection"
      GroupName: bastion-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: bastion-sg
  BastionEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  BastionEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: Ec2AdminProfile
      Roles: 
        - !Ref BastionEc2IamRole

  AWSLoadBalancerControllerIAMPolicy:
    # https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.7/docs/install/iam_policy.json
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "iam:CreateServiceLinkedRole"
            Resource: "*"
            Condition:
              StringEquals: 
                "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
          - Effect: "Allow"
            Action: 
              - "ec2:*"
              - "elasticloadbalancing:*"
            Resource: "*"
          - Effect: "Allow"
            Action: 
              - "cognito-idp:DescribeUserPoolClient"
              - "acm:ListCertificates"
              - "acm:DescribeCertificate"
              - "iam:ListServerCertificates"
              - "iam:GetServerCertificate"
              - "waf-regional:GetWebACL"
              - "waf-regional:GetWebACLForResource"
              - "waf-regional:AssociateWebACL"
              - "waf-regional:DisassociateWebACL"
              - "wafv2:GetWebACL"
              - "wafv2:GetWebACLForResource"
              - "wafv2:AssociateWebACL"
              - "wafv2:DisassociateWebACL"
              - "shield:GetSubscriptionState"
              - "shield:DescribeProtection"
              - "shield:CreateProtection"
              - "shield:DeleteProtection"
            Resource: "*"
      ManagedPolicyName: AWSLoadBalancerControllerIAMPolicy
  AmazonEKSClusterAutoscalerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "VisualEditor0"
            Effect: "Allow"
            Action:
              - "autoscaling:SetDesiredCapacity"
              - "autoscaling:TerminateInstanceInAutoScalingGroup"
            Resource: "*"
            Condition: 
              StringEquals:
                "aws:ResourceTag/k8s.io/cluster-autoscaler/${EksCluster}": "owned"
          - Sid: "VisualEditor1"
            Effect: "Allow"
            Action:
              - "autoscaling:DescribeAutoScalingInstances"
              - "autoscaling:DescribeAutoScalingGroups"
              - "ec2:DescribeLaunchTemplateVersions"
              - "autoscaling:DescribeTags"
              - "autoscaling:DescribeLaunchConfigurations"
              - "ec2:DescribeInstanceTypes"
            Resource: "*"
      ManagedPolicyName: AmazonEKSClusterAutoscalerPolicy

  EksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: stem-cluster
      AccessConfig: 
        AuthenticationMode: API_AND_CONFIG_MAP
        BootstrapClusterCreatorAdminPermissions: true
      BootstrapSelfManagedAddons: true
      Logging: 
        ClusterLogging: 
          EnabledTypes: 
            - Type: api
            - Type: audit
            - Type: authenticator
            - Type: controllerManager
            - Type: scheduler
      ResourcesVpcConfig: 
        EndpointPrivateAccess: true
        EndpointPublicAccess: false
        # PublicAccessCidrs:
        #   - !Sub
        #     - "${PublicIp}/32"
        #     - PublicIp: !GetAtt BastionEc2ElasticIP.PublicIp
        SecurityGroupIds: 
          - !Ref EksClusterSecurityGroup
        SubnetIds: 
          - !Ref PublicSubnetA
          - !Ref PublicSubnetB
          - !Ref PublicSubnetC
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
          - !Ref PrivateSubnetC
      RoleArn: !GetAtt EksClusterIamRole.Arn
      # UpgradePolicy: 
      #   SupportType: String
      # Version: String
      # KubernetesNetworkConfig: 
      #   IpFamily: ipv4
      #   ServiceIpv4Cidr: 10.0.0.0/16
      #   ServiceIpv6Cidr: String
      # EncryptionConfig: 
      #   - Provider: 
      #       KeyArn: String
      #     Resources: 
      #       - String
  AppNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      NodegroupName: stem-app
      AmiType: AL2023_x86_64_STANDARD
      InstanceTypes: 
        - t3.medium #c5.large
      CapacityType: ON_DEMAND
      ClusterName: !Ref EksCluster
      ForceUpdateEnabled: true
      Labels: 
        stem/dedicated: app
      NodeRole: !GetAtt EksNodeIamRole.Arn
      ScalingConfig: 
        DesiredSize: 2
        MaxSize: 4
        MinSize: 2
      Subnets: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      LaunchTemplate:
        Id: !Ref AppLaunchTemplate
  AppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: app-nodegroup-launchtemplate
      LaunchTemplateData: 
        KeyName: !Ref KeyPair
        SecurityGroupIds: 
          - !Ref EksNodeSecurityGroup
        TagSpecifications: 
          - ResourceType: instance
            Tags: 
              - Key: Name
                Value: app-nodegroup-instance
  AddonNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      NodegroupName: stem-addon
      AmiType: AL2023_x86_64_STANDARD
      InstanceTypes: 
        - t3.medium #c5.large
      CapacityType: ON_DEMAND
      ClusterName: !Ref EksCluster
      ForceUpdateEnabled: true
      Labels: 
        stem/dedicated: addon
      NodeRole: !GetAtt EksNodeIamRole.Arn
      ScalingConfig: 
        DesiredSize: 2
        MaxSize: 4
        MinSize: 2
      Subnets: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      LaunchTemplate:
        Id: !Ref AddonLaunchTemplate
  AddonLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: addon-nodegroup-launchtemplate
      LaunchTemplateData: 
        KeyName: !Ref KeyPair
        SecurityGroupIds: 
          - !Ref EksNodeSecurityGroup
        TagSpecifications: 
          - ResourceType: instance
            Tags: 
              - Key: Name
                Value: addon-nodegroup-instance
  EksClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for EKS Cluster SSH Connection"
      GroupName: eks-cluster-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: eks-cluster-sg
  EksNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for EKS Cluster Node SSH Connection"
      GroupName: eks-node-sg
      SecurityGroupIngress: 
        # - SourceSecurityGroupId: !Ref BastionEc2SecurityGroup
        #   FromPort: 22
        #   IpProtocol: tcp
        #   ToPort: 22
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: eks-node-sg
  EksClusterIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
  EksNodeIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
  EksClusterAccessEntry:
    # To manage your EKS Cluster using 'kubectl' commands inside a Bastion EC2 
    Type: AWS::EKS::AccessEntry
    Properties:
      AccessPolicies: 
        - AccessScope: 
            Type: cluster
          PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
      ClusterName: !Ref EksCluster
      PrincipalArn: !GetAtt BastionEc2IamRole.Arn
      Type: STANDARD