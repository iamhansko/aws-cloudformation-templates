AWSTemplateFormatVersion: '2010-09-09'
Description: Governance (us-east-1)

Parameters:
  DefaultVpcId:
    Type: AWS::EC2::VPC::Id
  DefaultVpcPublicSubnetId:
    Type: AWS::EC2::Subnet::Id
  BastionEc2AmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"

Resources:
  BastionEc2:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: '1'                
        Timeout: PT5M
    Properties:
      IamInstanceProfile: !Ref BastionEc2InstanceProfile
      ImageId: !Ref BastionEc2AmiId
      InstanceType: t3.micro
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref DefaultVpcPublicSubnetId
          GroupSet: 
            - !Ref BastionEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: governance-bastion
      UserData:
        # sudo tail -f /var/log/cloud-init-output.log
        Fn::Base64:
          !Sub |
            #!/bin/bash
            dnf update -y
            dnf groupinstall -y "Development Tools"
            dnf install -y python3.12
            dnf install -y python3-pip
            ln -s /usr/bin/python3.12 /usr/bin/python

            dnf install -y git

            wget https://github.com/coder/code-server/releases/download/v4.100.3/code-server-4.100.3-linux-amd64.tar.gz
            tar -xzf code-server-4.100.3-linux-amd64.tar.gz
            mv code-server-4.100.3-linux-amd64 /usr/local/lib/code-server
            ln -s /usr/local/lib/code-server/bin/code-server /usr/local/bin/code-server

            mkdir -p /home/ec2-user/.config/code-server
            cat <<EOF > /home/ec2-user/.config/code-server/config.yaml
            bind-addr: 0.0.0.0:8000
            auth: none
            cert: false
            EOF
            chown -R ec2-user:ec2-user /home/ec2-user/.config
            
            cat <<EOF > /etc/systemd/system/code-server.service
            [Unit]
            Description=VS Code Server
            After=network.target
            [Service]
            Type=simple
            User=ec2-user
            ExecStart=/usr/local/bin/code-server --config /home/ec2-user/.config/code-server/config.yaml /home/ec2-user
            Restart=always
            [Install]
            WantedBy=multi-user.target
            EOF
            systemctl daemon-reload
            systemctl enable code-server
            systemctl start code-server

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionEc2 --region ${AWS::Region}
  BastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      VpcId: !Ref DefaultVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
  BastionEc2Role:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: BastionEc2Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
  BastionEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: BastionEc2InstanceProfile
      Roles:
        - !Ref BastionEc2Role
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
  
  ConfigRule:
    Type: AWS::Config::ConfigRule
    DependsOn:
      - LambdaPermission
    Properties:
      ConfigRuleName: governance-role
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: CUSTOM_LAMBDA
        SourceIdentifier: !GetAtt LambdaFunction.Arn
        SourceDetails:
          - EventSource: aws.config
            MessageType: ConfigurationItemChangeNotification
          - EventSource: aws.config
            MessageType: OversizedConfigurationItemChangeNotification
  ########### AWS Config ###########
  ConfigRecorder: 
    Type: AWS::Config::ConfigurationRecorder
    Properties: 
      Name: default
      RecordingGroup: 
        AllSupported: false
        IncludeGlobalResourceTypes: false
        ResourceTypes: []
        ExclusionByResourceTypes:
          ResourceTypes: [
            "AWS::IAM::Policy",
            "AWS::IAM::User",
            "AWS::IAM::Role",
            "AWS::IAM::Group"
          ]
        RecordingStrategy:
          UseOnly: EXCLUSION_BY_RESOURCE_TYPES
      RecordingMode:
        RecordingFrequency: CONTINUOUS
        RecordingModeOverrides: []
      RoleARN: !GetAtt ConfigServiceRole.Arn
  ConfigServiceRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: ConfigServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        # - arn:aws:iam::aws:policy/aws-service-role/AWSConfigServiceRolePolicy
        - arn:aws:iam::aws:policy/AdministratorAccess
  DeliveryChannel: 
    Type: AWS::Config::DeliveryChannel
    Properties: 
      ConfigSnapshotDeliveryProperties: 
        DeliveryFrequency: One_Hour
      S3BucketName: !Ref ConfigBucket
  ConfigBucket:
    Type: AWS::S3::Bucket
  
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:config:${AWS::Region}:${AWS::AccountId}:config-rule/*
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: governance-lambda
      Runtime: python3.13
      Role: !GetAtt LambdaRole.Arn
      Handler: index.lambda_handler
      Timeout: 60
      LoggingConfig:
        LogGroup: /korea/governance/cloudwatch
      Code:
        ZipFile: |
          import boto3
          import json

          config_client = boto3.client('config')
          iam_client = boto3.client('iam')

          def get_attached_policies(role_name):
              """해당 IAM 롤의 모든 AWS 관리형 정책 가져오기"""
              paginator = iam_client.get_paginator('list_attached_role_policies')
              policies = []
              for page in paginator.paginate(RoleName=role_name):
                  policies.extend(page['AttachedPolicies'])
              return policies

          def update_role_policies(role_name):
              """AmazonS3ReadOnlyAccess만 남기고 나머지 정책 제거. 없으면 추가."""
              s3_policy_arn = 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
              policies = get_attached_policies(role_name)

              has_s3 = any(p['PolicyArn'] == s3_policy_arn for p in policies)
              other_policies = [p for p in policies if p['PolicyArn'] != s3_policy_arn]

              # AmazonS3ReadOnlyAccess 이외 정책 제거
              for p in other_policies:
                  print(f"Detached policy: {p['PolicyName']}")
                  iam_client.detach_role_policy(RoleName=role_name, PolicyArn=p['PolicyArn'])
              # AmazonS3ReadOnlyAccess 없으면 추가
              if len(policies) == 0:
                  print(f"No policies attached to the role")
              if not has_s3:
                  print(f"Attached policy: AmazonS3ReadOnlyAccess")
                  iam_client.attach_role_policy(RoleName=role_name, PolicyArn=s3_policy_arn)

          def lambda_handler(event, context):
              invoking_event = json.loads(event['invokingEvent'])
              configuration_item = invoking_event.get('configurationItem', {})
              instance_id = configuration_item.get('resourceId')
              tags = configuration_item.get('tags', {}) or {}
              instance_name = tags.get('Name', '')

              if configuration_item.get('resourceType') != 'AWS::EC2::Instance':
                  return
              if instance_name and instance_name == 'governance-bastion':
                  return

              compliance = "COMPLIANT"
              annotation = "Only AmazonS3ReadOnlyAccess Attached"

              iam_profile = configuration_item.get('configuration', {}).get('iamInstanceProfile')
              if not iam_profile:
                  compliance = "NON_COMPLIANT"
                  annotation = "No IAM instance profile attached."
              else:
                  arn = iam_profile.get('arn', '')
                  profile_name = arn.split('/')[-1] if arn else ''
                  try:
                      profile = iam_client.get_instance_profile(InstanceProfileName=profile_name)['InstanceProfile']
                      roles = profile.get('Roles', [])
                      if len(roles) != 1:
                          compliance = "NON_COMPLIANT"
                          annotation = "Instance profile must have exactly one role."
                      else:
                          for role in roles:
                              role_name = role['RoleName']
                              policies = get_attached_policies(role_name)
                              s3_policy_arn = 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
                              # 정책 목록 검사
                              if all(p['PolicyArn'] == s3_policy_arn for p in policies) and policies:
                                  compliance = "COMPLIANT"
                              else:
                                  compliance = "NON_COMPLIANT"
                                  annotation = "AmazonS3ReadOnlyAccess 외 다른 정책이 존재함. 자동으로 제거 및 추가 수행."
                                  config_client.put_evaluations(
                                      Evaluations=[{
                                          'ComplianceResourceType': configuration_item['resourceType'],
                                          'ComplianceResourceId': instance_id,
                                          'ComplianceType': compliance,
                                          'OrderingTimestamp': configuration_item['configurationItemCaptureTime'],
                                          'Annotation': annotation
                                      }],
                                      ResultToken=event['resultToken']
                                  )
                                  update_role_policies(role_name)
                                  compliance = "COMPLIANT"
                                  annotation = "Only AmazonS3ReadOnlyAccess Attached"
                  except Exception as e:
                      compliance = "NON_COMPLIANT"
                      annotation = f"Error occurred: {e}"

              # AWS Config로 평가 결과 리포트
              config_client.put_evaluations(
                  Evaluations=[{
                      'ComplianceResourceType': configuration_item['resourceType'],
                      'ComplianceResourceId': instance_id,
                      'ComplianceType': compliance,
                      'OrderingTimestamp': configuration_item['configurationItemCaptureTime'],
                      'Annotation': annotation
                  }],
                  ResultToken=event['resultToken']
              )
              return compliance
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: LambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AttachOnly-AmazonS3ReadOnlyAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:GetInstanceProfile
                  - iam:ListAttachedRolePolicies
                  - iam:DetachRolePolicy
                  - iam:AttachRolePolicy
                  - config:PutEvaluations
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'

  GovernanceInstanceProfile1:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: governance-instance-profile-1
      Roles:
        - !Ref GovernanceRole1
  GovernanceRole1:
    Type: AWS::IAM::Role
    Properties:
      RoleName: governance-instance-profile-1
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  GovernanceInstanceProfile2:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: governance-instance-profile-2
      Roles:
        - !Ref GovernanceRole2
  GovernanceRole2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: governance-instance-profile-2
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: []
