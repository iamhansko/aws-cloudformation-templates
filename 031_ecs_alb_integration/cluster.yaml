AWSTemplateFormatVersion: '2010-09-09'
Description: ECS + ALB + CloudWatch

Parameters:
  VpcCidr:
    Type: String
    Default: 10.10.0.0/16
  SubnetACidr:
    Type: String
    Default: 10.10.0.0/24
  SubnetCCidr:
    Type: String
    Default: 10.10.1.0/24
  BastionEc2AmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: mo-vpc

  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: mo-igw
  IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref Igw

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetACidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: mo-public-a

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCCidr
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: mo-public-c

  PublicRt:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: mo-rt
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRt
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw
  PublicSubnetARtAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRt
  PublicSubnetCRtAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRt

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ecs-cluster

  Ecr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: monitoring
      EmptyOnDelete: True

  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: monitoring-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: monitoring
          Image: !Sub "${Ecr.RepositoryUri}:latest"
          PortMappings:
            - ContainerPort: 80
          Essential: true
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: mo-alb
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetC
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: alb-sg
  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP
  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: mo-tg
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref Vpc
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: /

  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - Alb
      - AlbListener
    Properties:
      ServiceName: monitoring-svc
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref EcsTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          # Public Subnet -> Public IP Required (for ECR Endpoint "dkr/api" Access)
          # https://repost.aws/questions/QUUHnCJgEzS4CkEhJ2yWco0A/ecs-fargate-task-won-t-launch-fails-to-authenticate-with-ecr-and-won-t-log-anything#ANDygkO1puTBuOSNjyoviFow
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsServiceSecurityGroup
          Subnets:
            - !Ref PublicSubnetA
            - !Ref PublicSubnetC
      LoadBalancers:
        - ContainerName: monitoring
          ContainerPort: 80
          TargetGroupArn: !Ref AlbTargetGroup
  EcsServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref AlbSecurityGroup
      Tags:
        - Key: Name
          Value: ecs-svc-sg

  CloudWatchgDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: monitoring-dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0, "y": 0, "width": 8, "height": 7,
              "properties": {
                "metrics": [
                  [ "AWS/ECS", "CPUUtilization", "ClusterName", "${EcsCluster}", "ServiceName", "${EcsService.Name}" ],
                  [ ".", "MemoryUtilization", ".", ".", ".", "." ]
                ],
                "period": 60,
                "stat": "Average",
                "title": "ECS CPU/Memory Usage",
                "region": "${AWS::Region}"
              }
            },
            {
              "type": "metric",
              "x": 8, "y": 0, "width": 8, "height": 7,
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${Alb.LoadBalancerFullName}" ],
                  [ ".", "HTTPCode_Target_5XX_Count", ".", "." ]
                ],
                "period": 60,
                "stat": "Sum",
                "title": "ALB Requests & 5xx Errors",
                "region": "${AWS::Region}"
              }
            }
          ]
        }

  CloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: alb-5xx-alarm
      AlarmDescription: "5xx 에러가 2번 이상 발생했습니다."
      Namespace: AWS/ApplicationELB
      MetricName: HTTPCode_Target_5XX_Count
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt Alb.LoadBalancerFullName
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      ActionsEnabled: True
      TreatMissingData: notBreaching

  BastionEc2:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: '1'                
        Timeout: PT7M
    Properties:
      IamInstanceProfile: !Ref BastionEc2InstanceProfile
      ImageId: !Ref BastionEc2AmiId
      InstanceType: t3.small
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetA
          GroupSet: 
            - !Ref BastionEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: bastion
      UserData:
        # sudo tail -f /var/log/cloud-init-output.log
        Fn::Base64:
          !Sub |
            #!/bin/bash
            dnf update -y
            dnf groupinstall -y "Development Tools"
            dnf install -y python3.12
            dnf install -y python3-pip
            ln -s /usr/bin/python3.12 /usr/bin/python

            dnf install -y git

            wget https://github.com/coder/code-server/releases/download/v4.100.3/code-server-4.100.3-linux-amd64.tar.gz
            tar -xzf code-server-4.100.3-linux-amd64.tar.gz
            mv code-server-4.100.3-linux-amd64 /usr/local/lib/code-server
            ln -s /usr/local/lib/code-server/bin/code-server /usr/local/bin/code-server

            mkdir -p /home/ec2-user/.config/code-server
            cat <<EOF > /home/ec2-user/.config/code-server/config.yaml
            bind-addr: 0.0.0.0:8000
            auth: none
            cert: false
            EOF
            chown -R ec2-user:ec2-user /home/ec2-user/.config
            
            cat <<EOF > /etc/systemd/system/code-server.service
            [Unit]
            Description=VS Code Server
            After=network.target
            [Service]
            Type=simple
            User=ec2-user
            ExecStart=/usr/local/bin/code-server --config /home/ec2-user/.config/code-server/config.yaml /home/ec2-user
            Restart=always
            [Install]
            WantedBy=multi-user.target
            EOF
            systemctl daemon-reload
            systemctl enable code-server
            systemctl start code-server

            dnf install -yq docker
            systemctl start docker
            systemctl enable docker
            # usermod -aG docker ec2-user
            # newgrp docker
            chmod 666 /var/run/docker.sock

            su - ec2-user << EOF
            cd /home/ec2-user
            aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            echo 'from flask import Flask
            app = Flask(__name__)

            @app.route("/")
            def index():
              return "Hello ECS"

            @app.route("/health")
            def healthcheck():
              return "Healthy"

            @app.route("/error")
            def error():
              return "Server Error", 500

            if __name__ == "__main__":
              app.run(host="0.0.0.0", port=80)' > monitoring.py
            echo 'FROM python:3.13-slim
            WORKDIR /app
            COPY monitoring.py .
            RUN pip install --no-cache-dir Flask
            CMD ["python", "monitoring.py"]' > Dockerfile
            docker build -t ${Ecr.RepositoryUri} .
            docker push ${Ecr.RepositoryUri}
            EOF

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionEc2 --region ${AWS::Region}
  BastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Bastion EC2 SSH Connection"
      GroupName: bastion-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 8000
          IpProtocol: tcp
          ToPort: 8000
      VpcId: !Ref Vpc
  BastionEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: Ec2AdminRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  BastionEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: Ec2AdminProfile
      Roles: 
        - !Ref BastionEc2IamRole
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]