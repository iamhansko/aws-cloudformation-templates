AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template"

Parameters:
  AmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"

Mappings:
  ResourceMap:
    Vpc:
      Name : eks-vpc
      CidrBlock: 192.168.0.0/16
    PublicSubnet:
      Name: eks-public
    PrivateSubnet:
      Name: eks-private
    InternetGateway:
      Name: eks-igw
    NatGateway:
      Name: eks-natgw
    BastionEc2:
      Name: eks-bastion
      InstanceType: t3.small

Resources:
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: True
      EnableDnsHostnames: True
      CidrBlock: !FindInMap [ResourceMap, Vpc, CidrBlock]
      Tags: 
        - Key : Name
          Value : !FindInMap [ResourceMap, Vpc, Name]
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [0, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key: Name
          Value: !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "a"]]
        - Key: kubernetes.io/role/internal-elb
          Value: 1
      VpcId: !Ref Vpc
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [1, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key: Name
          Value: !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "b"]]
        - Key: kubernetes.io/role/internal-elb
          Value: 1
      VpcId: !Ref Vpc
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: !Select [2, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "c"]]
        - Key: kubernetes.io/role/internal-elb
          Value: 1
      VpcId: !Ref Vpc
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [3, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "a"]]
        - Key: kubernetes.io/role/elb
          Value: 1
      VpcId: !Ref Vpc
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [4, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "b"]]
        - Key: kubernetes.io/role/elb
          Value: 1
      VpcId: !Ref Vpc
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: !Select [5, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 8 ]]
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "c"]]
        - Key: kubernetes.io/role/elb
          Value: 1
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !FindInMap [ResourceMap, InternetGateway, Name]
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  NatGatewayAElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "a"]]
  NatGatewayBElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "b"]]
  NatGatewayCElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayCElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetC
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, NatGateway, Name], "c"]]
      
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PublicSubnet, Name], "rt"]]
      VpcId: !Ref Vpc
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetC
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "a", "rt"]]
      VpcId: !Ref Vpc
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetARoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateSubnetARouteTable
  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "b", "rt"]]
      VpcId: !Ref Vpc
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetBRouteTable
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetBRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref PrivateSubnetBRouteTable
  PrivateSubnetCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : !Join ["-", [!FindInMap [ResourceMap, PrivateSubnet, Name], "c", "rt"]]
      VpcId: !Ref Vpc
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetCRouteTable
      SubnetId: !Ref PrivateSubnetC
  PrivateSubnetCRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayC
      RouteTableId: !Ref PrivateSubnetCRouteTable

  BastionEc2:
    Type: AWS::EC2::Instance
    DependsOn:
      - EksOidcProvider
    CreationPolicy:
      ResourceSignal:
        Count: '1'                
        Timeout: PT20M
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !FindInMap [ResourceMap, BastionEc2, InstanceType]
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetA
          GroupSet: 
            - !Ref BastionEc2SecurityGroup
            - !GetAtt EksCluster.ClusterSecurityGroupId
      Tags: 
        - Key: Name
          Value: !FindInMap [ResourceMap, BastionEc2, Name]
      IamInstanceProfile: !Ref BastionEc2InstanceProfile
      UserData: 
        # sudo tail -f /var/log/cloud-init-output.log
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            dnf update -yq
            dnf groupinstall -yq "Development Tools"
            dnf install -yq git

            export VSC_VERSION="4.102.3"
            wget https://github.com/coder/code-server/releases/download/v$VSC_VERSION/code-server-$VSC_VERSION-linux-amd64.tar.gz
            tar -xzf code-server-$VSC_VERSION-linux-amd64.tar.gz
            mv code-server-$VSC_VERSION-linux-amd64 /usr/local/lib/code-server
            ln -s /usr/local/lib/code-server/bin/code-server /usr/local/bin/code-server

            mkdir -p /home/ec2-user/.config/code-server
            cat <<EOF > /home/ec2-user/.config/code-server/config.yaml
            bind-addr: 0.0.0.0:8000
            auth: none
            cert: false
            EOF
            chown -R ec2-user:ec2-user /home/ec2-user/.config
            
            cat <<EOF > /etc/systemd/system/code-server.service
            [Unit]
            Description=VS Code Server
            After=network.target
            [Service]
            Type=simple
            User=ec2-user
            ExecStart=/usr/local/bin/code-server --config /home/ec2-user/.config/code-server/config.yaml /home/ec2-user
            Restart=always
            [Install]
            WantedBy=multi-user.target
            EOF
            systemctl daemon-reload
            systemctl enable code-server
            systemctl start code-server

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionEc2 --region ${AWS::Region}

            mkdir -p /home/ec2-user/manifests
            cat <<EOF > /home/ec2-user/manifests/2048.yaml
            apiVersion: v1
            kind: Namespace
            metadata:
              name: game-2048
            ---
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              namespace: game-2048
              name: deployment-2048
            spec:
              selector:
                matchLabels:
                  app.kubernetes.io/name: app-2048
              replicas: 5
              template:
                metadata:
                  labels:
                    app.kubernetes.io/name: app-2048
                spec:
                  containers:
                  - image: public.ecr.aws/l6m2t8p7/docker-2048:latest
                    imagePullPolicy: Always
                    name: app-2048
                    ports:
                    - containerPort: 80
            ---
            apiVersion: v1
            kind: Service
            metadata:
              namespace: game-2048
              name: service-2048
            spec:
              ports:
                - port: 80
                  targetPort: 80
                  protocol: TCP
              type: NodePort
              selector:
                app.kubernetes.io/name: app-2048
            ---
            apiVersion: networking.k8s.io/v1
            kind: Ingress
            metadata:
              namespace: game-2048
              name: ingress-2048
              annotations:
                alb.ingress.kubernetes.io/scheme: internal
                alb.ingress.kubernetes.io/target-type: ip
                alb.ingress.kubernetes.io/manage-backend-security-group-rules: "true"
                alb.ingress.kubernetes.io/security-groups: ${AlbServiceSecurityGroup}
            spec:
              ingressClassName: alb
              rules:
                - http:
                    paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: service-2048
                          port:
                            number: 80
            EOF
            chown -R ec2-user:ec2-user /home/ec2-user/manifests/2048.yaml

            sudo -Eu ec2-user bash << 'EOF'
            cd /home/ec2-user
            mkdir -p /home/ec2-user/bin
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.30.0/2024-05-12/bin/linux/amd64/kubectl
            chmod +x kubectl
            mv kubectl /home/ec2-user/bin/kubectl
            export PATH=/home/ec2-user/bin:$PATH
            echo "export PATH=/home/ec2-user/bin:$PATH" >> ~/.bashrc
            echo "alias k=kubectl" >> ~/.bashrc
            echo "complete -o default -F __start_kubectl k" >> ~/.bashrc
            echo "source <(kubectl completion bash)" >> ~/.bashrc
            exec bash
            aws eks update-kubeconfig --region ${AWS::Region} --name ${EksCluster}

            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin

            curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > /home/ec2-user/get_helm.sh
            chmod 700 /home/ec2-user/get_helm.sh
            /home/ec2-user/get_helm.sh

            sleep 5
            eksctl create iamserviceaccount \
            --cluster=${EksCluster} \
            --namespace=kube-system \
            --name=aws-load-balancer-controller \
            --role-name AmazonEKSLoadBalancerControllerRole \
            --attach-policy-arn=${AWSLoadBalancerControllerIAMPolicy} \
            --approve --region ${AWS::Region}
            helm repo add eks https://aws.github.io/eks-charts
            helm repo update eks
            helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system \
            --set clusterName=${EksCluster} \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller \
            --set region=${AWS::Region} \
            --set vpcId=${Vpc}
            kubectl rollout status -n kube-system deploy aws-load-balancer-controller
            sleep 5

            kubectl apply -f /home/ec2-user/manifests/2048.yaml

            EOF
  BastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Bastion EC2 SSH Connection"
      GroupName: bastion-sg
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: bastion-sg
  BastionEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: BastionEc2IamPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - eks:*
                  - cloudformation:*
                  - iam:*
                Resource: '*'
  BastionEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: 
        - !Ref BastionEc2IamRole
  AWSLoadBalancerControllerIAMPolicy:
    # https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.7/docs/install/iam_policy.json
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "iam:CreateServiceLinkedRole"
            Resource: "*"
            Condition:
              StringEquals: 
                "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
          - Effect: "Allow"
            Action: 
              - "ec2:*"
              - "elasticloadbalancing:*"
            Resource: "*"
          - Effect: "Allow"
            Action: 
              - "cognito-idp:DescribeUserPoolClient"
              - "acm:ListCertificates"
              - "acm:DescribeCertificate"
              - "iam:ListServerCertificates"
              - "iam:GetServerCertificate"
              - "waf-regional:GetWebACL"
              - "waf-regional:GetWebACLForResource"
              - "waf-regional:AssociateWebACL"
              - "waf-regional:DisassociateWebACL"
              - "wafv2:GetWebACL"
              - "wafv2:GetWebACLForResource"
              - "wafv2:AssociateWebACL"
              - "wafv2:DisassociateWebACL"
              - "shield:GetSubscriptionState"
              - "shield:DescribeProtection"
              - "shield:CreateProtection"
              - "shield:DeleteProtection"
            Resource: "*"
      ManagedPolicyName: AWSLoadBalancerControllerIAMPolicy
  AlbServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for ALB"
      GroupName: alb-sg
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt BastionEc2SecurityGroup.GroupId
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: alb-sg

  EksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      AccessConfig: 
        AuthenticationMode: API_AND_CONFIG_MAP
        BootstrapClusterCreatorAdminPermissions: true
      BootstrapSelfManagedAddons: true
      Logging: 
        ClusterLogging: 
          EnabledTypes: 
            - Type: api
            - Type: audit
            - Type: authenticator
            - Type: controllerManager
            - Type: scheduler
      ResourcesVpcConfig: 
        EndpointPrivateAccess: true
        EndpointPublicAccess: false
        SubnetIds: 
          - !Ref PublicSubnetA
          - !Ref PublicSubnetB
          - !Ref PublicSubnetC
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
          - !Ref PrivateSubnetC
      RoleArn: !GetAtt EksClusterIamRole.Arn
  ManagedNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      NodegroupName: app-mng
      AmiType: AL2023_x86_64_STANDARD
      InstanceTypes: 
        - t3.medium
      CapacityType: ON_DEMAND
      ClusterName: !Ref EksCluster
      ForceUpdateEnabled: true
      Labels: 
        mng/dedicated: app
      NodeRole: !GetAtt EksNodeIamRole.Arn
      ScalingConfig: 
        DesiredSize: 2
        MaxSize: 2
        MinSize: 2
      Subnets: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
  EksClusterIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
  EksNodeIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  EksClusterAccessEntry:
    # To manage your EKS Cluster using 'kubectl' commands inside a Bastion EC2 
    Type: AWS::EKS::AccessEntry
    Properties:
      AccessPolicies: 
        - AccessScope: 
            Type: cluster
          PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
      ClusterName: !Ref EksCluster
      PrincipalArn: !GetAtt BastionEc2IamRole.Arn
      Type: STANDARD
  EksOidcProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: !GetAtt EksCluster.OpenIdConnectIssuerUrl
      ClientIdList: 
        - sts.amazonaws.com

Outputs:
  BastionEc2PublicIP:
    Description: "Public IP Address of the VS Code Server EC2 instance"
    Value: !Sub "http://${BastionEc2.PublicIp}:8000"