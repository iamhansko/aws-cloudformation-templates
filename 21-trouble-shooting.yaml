AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template"

# Parameters:
#   KeyPair: 
#     Description: EC2 Key Pair
#     Type: AWS::EC2::KeyPair::KeyName

Mappings:
  RegionMap:
    us-east-1:
      AmazonLinux2023: ami-0005e0cfe09cc9050
      S3Bucket: world-skills-seoul
    ap-northeast-2:
      AmazonLinux2023: ami-0bfd23bc25c60d5a1
      S3Bucket: skills-seoul19990731

Resources:
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub "key-${AWS::StackId}"
  Ecr:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: True
      RepositoryName: day3
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags: 
        - Key : Name
          Value : vpc-skills-2113
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 10.0.0.0/24
      Tags: 
        - Key : Name
          Value : skills-pub-a-2113
      VpcId: !Ref Vpc
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 10.0.1.0/24
      Tags: 
        - Key : Name
          Value : skills-priv-a-2113
      VpcId: !Ref Vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: skills-igw-2113
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  NatGatewayElasticIp:
    Type: AWS::EC2::EIP
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayElasticIp.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags: 
        - Key : Name
          Value : skills-natgw-2113
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : skills-pub-a-rt-2113
      VpcId: !Ref Vpc
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : skills-priv-a-rt-2113
      VpcId: !Ref Vpc
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref PrivateSubnet
  PrivateSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateSubnetRouteTable
  Student01:
    Type: AWS::IAM::User
    Properties:
      LoginProfile: 
        Password: Student01password!
        PasswordResetRequired: True
      UserName: student01
  Student02:
    Type: AWS::IAM::User
    Properties:
      LoginProfile: 
        Password: Student02password!
        PasswordResetRequired: True
      UserName: student02
  Student01Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - iam:ListUsers
            Resource:
              - !Sub "arn:aws:iam::${AWS::AccountId}:user/*"
          - Effect: Allow
            Action:
              - iam:ChangePassword
              - iam:CreateAccessKey
              - iam:ListAccessKeys
            Resource:
              - !Sub "arn:aws:iam::${AWS::AccountId}:user/student01"
          - Effect: Allow
            Action:
              - ec2:StartInstances
              - ec2:StopInstances
              - ec2:TerminateInstances
              - ec2:CreateTags
            Resource: "*"
            Condition:
              StringEquals:
                "aws:ResourceTag/owner": "student01"
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
            Resource: "*"
      PolicyName: koreaStudent
      Users: 
        - !Ref Student01
  Student02Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - iam:ListUsers
            Resource:
              - !Sub "arn:aws:iam::${AWS::AccountId}:user/*"
          - Effect: Allow
            Action:
              - iam:ChangePassword
              - iam:CreateAccessKey
              - iam:ListAccessKeys
            Resource:
              - !Sub "arn:aws:iam::${AWS::AccountId}:user/student02"
          - Effect: Allow
            Action:
              - ec2:StartInstances
              - ec2:StopInstances
              - ec2:TerminateInstances
              - ec2:CreateTags
            Resource: "*"
            Condition:
              StringEquals:
                "aws:ResourceTag/owner": "student02"
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
            Resource: "*"
      PolicyName: koreaStudent
      Users: 
        - !Ref Student02
  Day311Ec2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2023]
      InstanceType: t2.small
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PrivateSubnet
          GroupSet: 
            - !Ref PrivateEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: day3-1-1
        - Key: owner
          Value: student01
  Day312Ec2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2023]
      InstanceType: t2.small
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PrivateSubnet
          GroupSet: 
            - !Ref PrivateEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: day3-1-2
        - Key: owner
          Value: student02
  Day33Ec2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2023]
      InstanceType: t2.small
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet
          GroupSet: 
            - !Ref PublicEc2SecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      UserData: 
        Fn::Base64: 
          !Sub | 
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            dnf update -y
            dnf install docker -y
            systemctl start docker
            systemctl enable docker
            usermod -aG docker ec2-user
            newgrp docker
            echo "#!/usr/bin/python3
            from flask import Flask, abort, jsonify
            import logging
            app = Flask(__name__)
            log = logging.getLogger('werkzeug')
            log.disabled = True
            app.logger.disabled = True
            @app.route('/health', methods=['GET'])
            def get_health():
              try:
                ret = {'status': 'ok'}
                return jsonify(ret), 200
              except Exception as e:
                logging.error(e)
                abort(500)
            @app.route('/v1/mock', methods=['GET'])
            def get_v1_mock():
              try:
                ret = {'v1': 'mock'}
                return jsonify(ret), 200
              except Exception as e:
                logging.error(e)
                abort(500)
            if __name__ == '__main__':
              app.run(host='0.0.0.0', port=8080)" > /home/ec2-user/app.py
            echo "FROM python:3.7-alpine
            WORKDIR /app
            COPY ./app.py ./
            RUN python3 -m pip install flask
            CMD [\"python3\", \"./app.py\"]" > /home/ec2-user/Dockerfile
            docker build -t day3 /home/ec2-user
            aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
            docker tag day3:latest ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/day3:latest
            docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/day3:latest
      Tags: 
        - Key: Name
          Value: day3-3-ec2
  Ec2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: EcrPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:GetLifecyclePolicy
                  - ecr:GetLifecyclePolicyPreview
                  - ecr:ListTagsForResource
                  - ecr:DescribeImageScanFindings
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource: '*'
      RoleName: Ec2EcrRole
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: Ec2EcrProfile
      Roles: 
        - !Ref Ec2IamRole
  PublicEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Public EC2 SSH Connection"
      GroupName: public-ec2-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref Vpc
  PrivateEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Private EC2"
      GroupName: asg-sg
      SecurityGroupIngress: 
        - FromPort: 22
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref PublicEc2SecurityGroup
          ToPort: 22
      VpcId: !Ref Vpc
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: PutS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:PutObject
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
      RoleName: LambdaS3Role
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        S3Bucket: !FindInMap [RegionMap, !Ref AWS::Region, S3Bucket]
        S3Key: day3-2-lambda.zip
      FunctionName: day3-2-lambda
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.12
      Handler: day3-2-lambda.handler
      Timeout: 30
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: PutS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:PutObject
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
      RoleName: LambdaS3Role
  