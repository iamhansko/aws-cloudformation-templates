AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template"

# Parameters:
#   KeyPair: 
#     Description: EC2 Key Pair
#     Type: AWS::EC2::KeyPair::KeyName

Mappings:
  RegionMap:
    us-east-1:
      AmazonLinux2023: ami-0005e0cfe09cc9050
      S3Bucket: world-skills-seoul
    ap-northeast-2:
      AmazonLinux2023: ami-0bfd23bc25c60d5a1
      S3Bucket: skills-seoul19990731

Resources:
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub "key-${AWS::StackId}"
  Ecr:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: True
      RepositoryName: wsi-api-ecr
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      Tags: 
        - Key : Name
          Value : wsi-vpc
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 10.1.2.0/24
      Tags: 
        - Key : Name
          Value : wsi-public-a
      VpcId: !Ref Vpc
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: 10.1.3.0/24
      Tags: 
        - Key : Name
          Value : wsi-public-b
      VpcId: !Ref Vpc
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 10.1.0.0/24
      Tags: 
        - Key : Name
          Value : wsi-private-a
      VpcId: !Ref Vpc
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: 10.1.1.0/24
      Tags: 
        - Key : Name
          Value : wsi-private-b
      VpcId: !Ref Vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: wsi-igw
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  NatGatewayAElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
        - Key : Name
          Value : wsi-natgw-a
  NatGatewayBElasticIp:
    Type: AWS::EC2::EIP
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBElasticIp.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags: 
        - Key : Name
          Value : wsi-natgw-b
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : wsi-public-rt
      VpcId: !Ref Vpc
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : wsi-private-a-rt
      VpcId: !Ref Vpc
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetARoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateSubnetARouteTable
  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key : Name
          Value : wsi-private-b-rt
      VpcId: !Ref Vpc
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetBRouteTable
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetBRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref PrivateSubnetBRouteTable
  BastionEc2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2023]
      InstanceType: t2.small
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetA
          GroupSet: 
            - !Ref BastionEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: wsi-bastion
      IamInstanceProfile: !Ref BastionEc2InstanceProfile
      UserData: 
        Fn::Base64: !Sub 
          - |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            dnf update -y
            dnf install docker -y
            systemctl start docker
            systemctl enable docker
            usermod -aG docker ec2-user
            newgrp docker
            echo "#!/bin/bash
            aws ec2 run-instances \
            --image-id ${Ami} \
            --count 1 \
            --instance-type t3.small \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=wsi:deploy:group,Value=dev-api},{Key=Name,Value='\$1'}]' \
            --key-name ${Key} \
            --iam-instance-profile Name=${InstanceProfile} \
            --security-group-ids ${SecurityGroup} \
            --subnet-id ${PrivateSubnet} \
            --user-data '#!/bin/bash -xe
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            dnf update -y
            dnf install ruby wget -y
            wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            service codedeploy-agent status'" > /opt/ec2_launch.sh
            chown ec2-user:ec2-user /opt/ec2_launch.sh
            chmod +x /opt/ec2_launch.sh
          - Ami: !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2023]
            Key: !Ref KeyPair
            SecurityGroup: !Ref PrivateEc2SecurityGroup
            PrivateSubnet: !Ref PrivateSubnetA
            InstanceProfile: !Ref PrivateEc2InstanceProfile
  BastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Bastion EC2 SSH Connection"
      GroupName: bastion-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref Vpc
  BastionEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CreateEc2Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:RunInstances
                  - ec2:CreateTags
                  - iam:PassRole
                  # for check script
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                  - ec2:DescribeRouteTables
                  - ec2:DescribeInstances
                  - ecr:DescribeRepositories
                  - codepipeline:ListPipelines
                  - codedeploy:GetDeploymentGroup
                  - codedeploy:GetApplication
                Resource: '*'
      RoleName: Ec2CreateEc2Role
  BastionEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: Ec2CrateEc2Profile
      Roles: 
        - !Ref BastionEc2IamRole
  PrivateEc21:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2023]
      InstanceType: t3.small
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - DeviceIndex: 0
          SubnetId: !Ref PrivateSubnetA
          GroupSet: 
            - !Ref PrivateEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: wsi-api-1
        - Key: wsi:deploy:group
          Value: dev-api
      IamInstanceProfile: !Ref PrivateEc2InstanceProfile
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          dnf update -y
          dnf install ruby wget -y
          wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          service codedeploy-agent status
  PrivateEc22:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AmazonLinux2023]
      InstanceType: t3.small
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - DeviceIndex: 0
          SubnetId: !Ref PrivateSubnetA
          GroupSet: 
            - !Ref PrivateEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: wsi-api-2
        - Key: wsi:deploy:group
          Value: dev-api
      IamInstanceProfile: !Ref PrivateEc2InstanceProfile
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          dnf update -y
          dnf install ruby wget -y
          wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          service codedeploy-agent status
  PrivateEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Private EC2"
      GroupName: private-ec2-sg
      SecurityGroupIngress: 
        - FromPort: 22
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref BastionEc2SecurityGroup
          ToPort: 22
        - FromPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref BastionEc2SecurityGroup
          ToPort: 80
      VpcId: !Ref Vpc
  PrivateEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: Ec2CodeDeployPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                Resource: '*'
      RoleName: wsi-api
  PrivateEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: wsi-api
      Roles: 
        - !Ref PrivateEc2IamRole
  CodeCommit:
    Type: AWS::CodeCommit::Repository
    Properties:
      Code: 
        BranchName: main
        S3: 
          Bucket: !FindInMap [RegionMap, !Ref AWS::Region, S3Bucket]
          Key: day2-2021-python-app.zip
      RepositoryName: wsi-api-repo
  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts: 
        Type: CODEPIPELINE
      ConcurrentBuildLimit: 5
      Environment: 
        ComputeType: BUILD_GENERAL1_MEDIUM
        Type: LINUX_CONTAINER
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
      Name: wsi-api-build
      ServiceRole: !Ref CodeBuildIamRole
      Source: 
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.9
            pre_build:
              commands:
                # - dnf update -y
                # - dnf groupinstall -y "Development Tools"
                # - dnf install -y openssl-devel bzip2-devel libffi-devel zlib-devel
                # - wget https://www.python.org/ftp/python/3.7.17/Python-3.7.17.tgz
                # - tar -xvzf Python-3.7.17.tgz
                # - ./Python-3.7.17/configure --enable-optimizations
                # - make altinstall
                # - python3.7 -m pip3 install flask
                - pip3 install flask
            build:
              commands:
                # - python3.7 -m compileall ./src/app.py
                # - mv src/__pycache__/app.cpython-37.pyc src/__pycache__/app.pyc
                - python -m compileall ./src/app.py
                - mv src/__pycache__/app.cpython-39.pyc src/__pycache__/app.pyc
          artifacts:
            files:
              - ./src/__pycache__/app.pyc
              - appspec.yml
              - scripts/start_server.sh
        Type: CODEPIPELINE
      TimeoutInMinutes: 15
  CodeBuildIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodeBuildEcrPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:GetLifecyclePolicy
                  - ecr:GetLifecyclePolicyPreview
                  - ecr:ListTagsForResource
                  - ecr:DescribeImageScanFindings
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource: '*'
      RoleName: CodeBuildEcrRole
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: wsi-api
      ComputePlatform: Server
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn:
      - PrivateEc21
      - PrivateEc22
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      AutoRollbackConfiguration: 
        Enabled: True
        Events: 
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_ALARM
          - DEPLOYMENT_STOP_ON_REQUEST
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: dev-api
      Ec2TagSet:
        Ec2TagSetList:
          - Ec2TagGroup: 
              - Key: wsi:deploy:group
                Type: KEY_AND_VALUE
                Value: dev-api
      ServiceRoleArn: !GetAtt CodeDeployIamRole.Arn
  CodeDeployIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodeDeployPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:CompleteLifecycleAction
                  - autoscaling:DeleteLifecycleHook
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeLifecycleHooks
                  - autoscaling:PutLifecycleHook
                  - autoscaling:RecordLifecycleActionHeartbeat
                  - autoscaling:CreateAutoScalingGroup
                  - autoscaling:CreateOrUpdateTags
                  - autoscaling:UpdateAutoScalingGroup
                  - autoscaling:EnableMetricsCollection
                  - autoscaling:DescribePolicies
                  - autoscaling:DescribeScheduledActions
                  - autoscaling:DescribeNotificationConfigurations
                  - autoscaling:SuspendProcesses
                  - autoscaling:ResumeProcesses
                  - autoscaling:AttachLoadBalancers
                  - autoscaling:AttachLoadBalancerTargetGroups
                  - autoscaling:PutScalingPolicy
                  - autoscaling:PutScheduledUpdateGroupAction
                  - autoscaling:PutNotificationConfiguration
                  - autoscaling:PutWarmPool
                  - autoscaling:DescribeScalingActivities
                  - autoscaling:DeleteAutoScalingGroup
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceStatus
                  - ec2:TerminateInstances
                  - tag:GetResources
                  - sns:Publish
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - elasticloadbalancing:DescribeTargetGroupAttributes
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeInstanceHealth
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:DeregisterTargets
                Resource: '*'
      RoleName: CodeDeployRole
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: wsi-api-pipeline
      PipelineType: V2
      ArtifactStore:
        Location: !Ref CodePipelineArtifactStoreS3Bucket
        Type: S3
      RoleArn: !GetAtt CodePipelineIamRole.Arn
      Stages: 
        - Name: SourceStage
          Actions: 
            - Name: SourceAction
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !GetAtt CodeCommit.Name
                BranchName: main
                PollForSourceChanges: False
              OutputArtifacts:
                - Name: SourceOutput
        - Name: BuildStage
          Actions: 
            - Name: BuildAction
              ActionTypeId: 
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
        - Name: DeployStage
          Actions: 
            - Name: DeployAction
              ActionTypeId: 
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
              InputArtifacts:
                - Name: BuildOutput
  CodePipelineArtifactStoreS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: RetainExceptOnCreate
  CodePipelineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:StartPipelineExecution
                Resource:
                  - !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:wsi-api-pipeline"
              - Effect: Allow
                Action:
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                Resource:
                  - !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:wsi-api-repo"
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/wsi-api-build"
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetDeployment
                Resource:
                  - !Sub "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:wsi-api/dev-api"
              - Effect: Allow
                Action:
                  - codedeploy:GetDeploymentConfig
                Resource:
                  - !Sub "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:CodeDeployDefault.AllAtOnce"
              - Effect: Allow
                Action:
                  - codedeploy:RegisterApplicationRevision
                  - codedeploy:GetApplicationRevision
                Resource:
                  - !Sub "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:wsi-api"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: "*"
      RoleName: CodePipelineRole
  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: >-
        AWS CodeCommit 소스 리포지토리와 브랜치에서 변경이 발생하면 파이프라인을 자동으로 시작하는 Amazon
        CloudWatch Events 규칙입니다. 이 규칙을 삭제하면 해당 파이프라인에서 변경 사항이 감지되지 않습니다. 자세한 정보:
        http://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-about-starting.html
      EventBusName: default
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:wsi-api-repo"
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - main
      Name: codepipeline-wsiapi-event-rule
      State: ENABLED
      Targets:
        - Id: codepipeline-codepipeline
          Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:wsi-api-pipeline"
          RoleArn: !GetAtt CloudWatchEventRuleIamRole.Arn
  CloudWatchEventRuleIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudWatchEventRulePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:StartPipelineExecution
                Resource:
                  - !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:wsi-api-pipeline"
      RoleName: CloudWatchEventRuleRole