Transform: AWS::LanguageExtensions
Parameters:
  InboundFromAnywhere:
    Type: String
    Default: "False"
    AllowedValues: ["True", "False"]
    Description: SeucirtyGroup Inbound Rule (Source 0.0.0.0/0)
  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
Conditions:
  SecurityGroupInboundFromAnywhere: !Equals [!Ref InboundFromAnywhere, "True"]
Mappings:
  AzMapping: 
    a:
      PublicSubnetCidr: 10.0.0.0/24
      PrivateSubnetCidr: 10.0.1.0/24
    b: 
      PublicSubnetCidr: 10.0.2.0/24
      PrivateSubnetCidr: 10.0.3.0/24
    c: 
      PublicSubnetCidr: 10.0.4.0/24
      PrivateSubnetCidr: 10.0.5.0/24
Resources:
  
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
  
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: igw
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  # PublicSubnets
  Fn::ForEach::PublicSubnets:
    - Az
    - [a, b]
    - PublicSubnet${Az}:
        Type: AWS::EC2::Subnet
        Properties:
          AvailabilityZone: !Sub ${AWS::Region}${Az}
          CidrBlock: !FindInMap [AzMapping, !Ref Az, PublicSubnetCidr]
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: !Sub public-subnet-${Az}
          VpcId: !Ref Vpc
      PublicSubnet${Az}RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PublicSubnetRouteTable
          SubnetId:
            Ref: !Sub PublicSubnet${Az}
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: public-rt
      VpcId: !Ref Vpc
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  
  # PrivateSubnets
  Fn::ForEach::PrivateSubnets:
    - Az
    - [a, b]
    - PrivateSubnet${Az}:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref Vpc
          CidrBlock: !FindInMap [AzMapping, !Ref Az, PrivateSubnetCidr]
          AvailabilityZone: !Sub ${AWS::Region}${Az}
          Tags:
            - Key: Name
              Value: !Sub private-subnet-${Az}
      PrivateSubnet${Az}RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref Vpc
          Tags:
            - Key: Name
              Value: !Sub private-rt-${Az}
      Natgateway${Az}ElasticIp:
        Type: AWS::EC2::EIP
      NatGateway${Az}:
        Type: AWS::EC2::NatGateway
        Properties:
          AllocationId: !GetAtt
            - !Sub Natgateway${Az}ElasticIp
            - AllocationId
          SubnetId:
            Ref: !Sub PublicSubnet${Az}
          Tags: 
            - Key : Name
              Value : !Sub natgw-${Az}
      PrivateSubnet${Az}RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId:
            Ref: !Sub PrivateSubnet${Az}RouteTable
          SubnetId: 
            Ref: !Sub PrivateSubnet${Az}
      PrivateSubnet${Az}Route:
        Type: AWS::EC2::Route
        Properties:
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId:
            Ref: !Sub NatGateway${Az}
          RouteTableId:
            Ref: !Sub PrivateSubnet${Az}RouteTable

  VsCodeEc2:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: '1'                
        Timeout: PT7M
    Properties:
      ImageId: !Ref AmiId
      InstanceType: t3.medium
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubneta
          GroupSet: 
            - !Ref VsCodeEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: vscode
      IamInstanceProfile: !Ref VsCodeEc2InstanceProfile
      UserData: 
        # sudo tail -f /var/log/cloud-init-output.log
        Fn::Base64: !Sub |
          #!/bin/bash
          dnf update -yq
          dnf install -yq git
          dnf groupinstall -yq "Development Tools"

          export VSC_VERSION="4.102.3"
          wget https://github.com/coder/code-server/releases/download/v$VSC_VERSION/code-server-$VSC_VERSION-linux-amd64.tar.gz
          tar -xzf code-server-$VSC_VERSION-linux-amd64.tar.gz
          mv code-server-$VSC_VERSION-linux-amd64 /usr/local/lib/code-server
          ln -s /usr/local/lib/code-server/bin/code-server /usr/local/bin/code-server
          mkdir -p /home/ec2-user/.config/code-server
          cat <<EOF > /home/ec2-user/.config/code-server/config.yaml
          bind-addr: 0.0.0.0:8000
          auth: none
          cert: false
          EOF
          chown -R ec2-user:ec2-user /home/ec2-user/.config
          cat <<EOF > /etc/systemd/system/code-server.service
          [Unit]
          Description=VS Code Server
          After=network.target
          [Service]
          Type=simple
          User=ec2-user
          ExecStart=/usr/local/bin/code-server --config /home/ec2-user/.config/code-server/config.yaml /home/ec2-user
          Restart=always
          [Install]
          WantedBy=multi-user.target
          EOF
          systemctl daemon-reload
          systemctl enable code-server
          systemctl start code-server

          sudo -Eu ec2-user bash << 'EOF'
          cd /home/ec2-user
          git clone https://github.com/iamhansko/aws-gamelift-sample.git
          mv aws-gamelift-sample gomoku

          echo '[config]

          # GameResult SQS
          SQS_REGION = ${AWS::Region}
          SQS_ENDPOINT = ${GameResultQueue.QueueUrl}
          ROLE_ARN = ${GomokuGameLiftFleetRole.Arn}' > ./gomoku/bin/FlexMatch/GomokuServer/Binaries/Win64/config.ini
          cd ./gomoku/bin/FlexMatch/GomokuServer
          zip -r server.zip ./*

          aws s3 cp --recursive /home/ec2-user/gomoku/ s3://${GameSourceS3Bucket}
          EOF

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource VsCodeEc2 --region ${AWS::Region}
  VsCodeEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      GroupName: vscode-sg
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        !If [SecurityGroupInboundFromAnywhere, [{
          "IpProtocol": "tcp",
          "FromPort": 8000,
          "ToPort": 8000,
          "CidrIp": "0.0.0.0/0"
        }], []]
      Tags:
        - Key: Name
          Value: vscode-sg
  VsCodeEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  VsCodeEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: 
        - !Ref VsCodeEc2IamRole
  
  SsmAssociation:
    Type: AWS::SSM::Association
    DependsOn:
      - VsCodeEc2 # Required
      - GomokuAPIDeployment
    Properties:
      Name: AWS-RunShellScript
      WaitForSuccessTimeoutSeconds: 600
      Targets:
        - Key: InstanceIds
          Values:
            - !Ref VsCodeEc2
      Parameters:
        commands: 
          # uid=0(root) gid=0(root) groups=0(root) context=system_u:system_r:unconfined_service_t:s0
          - !Sub |
              su - ec2-user << 'SSMEOF'
              export HOME=/home/ec2-user && cd $HOME
              sed -i 's/niop6gw2v0/${GomokuAPI}/g' ./gomoku/web/main.js
              sed -i 's/us-east-1/${AWS::Region}/g' ./gomoku/web/main.js
              aws s3 cp --recursive ./gomoku/web/ s3://${WebS3Bucket}
              SSMEOF
  
  GameSourceS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
  
  WebS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
  WebS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: WebS3BucketPolicy
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub ${WebS3Bucket.Arn}/*
      Bucket: !Ref WebS3Bucket

  GomokuPlayerInfo:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: GomokuPlayerInfo
      AttributeDefinitions:
        - AttributeName: PlayerName
          AttributeType: S
      KeySchema:
        - AttributeName: PlayerName
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  
  GomokuRanking:
    Type: AWS::ElastiCache::CacheCluster
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      ClusterName: GomokuRanking
      Port: 6379
      CacheNodeType: cache.r7g.large
      Engine: redis
      EngineVersion: 7.1
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref GomokuRankingSubnetGroup
      VpcSecurityGroupIds:
        - !GetAtt GomokuDefault.GroupId
  GomokuRankingSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet Group
      SubnetIds: 
        - !Ref PublicSubneta
        - !Ref PublicSubnetb
        - !Ref PrivateSubneta
        - !Ref PrivateSubnetb
  
  GomokuDefault:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: GomokuDefault
      GroupDescription: Security Group for Gomoku Resources
      VpcId: !Ref Vpc
  GomokuDefaultIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt GomokuDefault.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt GomokuDefault.GroupId
  
  GameResultQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      QueueName: game-result-queue
      VisibilityTimeout: 60
  
  GameLiftPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GameLiftPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - gamelift:*
            Resource: '*'
      Roles:
        - !Ref GomokuGameSqsProcess
        - !Ref GomokuGameMatchRequest
        - !Ref GomokuGameMatchStatus
  
  GomokuGameSqsProcess:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  
  GomokuGameRankUpdate:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GomokuGameRankReader:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GomokuGameMatchStatus:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  GomokuGameMatchRequest:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GomokuGameLiftFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - gamelift.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
  
  GomokuGameMatchEvent:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GameSqsProcess:
    Type: AWS::Lambda::Function
    DependsOn:
      - VsCodeEc2
    Properties:
      FunctionName: game-sqs-process
      Runtime: python3.13
      Handler: GameResultProcessing.lambda_handler
      Role: !GetAtt GomokuGameSqsProcess.Arn
      Code:
        S3Bucket: !Ref GameSourceS3Bucket
        S3Key: Lambda/code.zip
      Timeout: 60
  GameSqsProcessSqsTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt GameResultQueue.Arn
      FunctionName: !GetAtt GameSqsProcess.Arn

  GameRankUpdate:
    Type: AWS::Lambda::Function
    DependsOn:
      - VsCodeEc2
    Properties:
      FunctionName: game-rank-update
      Runtime: python3.13
      Handler: Scoring.handler
      Role: !GetAtt GomokuGameRankUpdate.Arn
      Code:
        S3Bucket: !Ref GameSourceS3Bucket
        S3Key: Lambda/code.zip
      Timeout: 60
      Environment:
        Variables: 
          REDIS: !GetAtt GomokuRanking.RedisEndpoint.Address
      VpcConfig:
        SecurityGroupIds: 
          - !GetAtt GomokuDefault.GroupId
        SubnetIds: 
          - !Ref PublicSubneta
          - !Ref PublicSubnetb
          - !Ref PrivateSubneta
          - !Ref PrivateSubnetb
  GameRankUpdateDynamoDbTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt GomokuPlayerInfo.StreamArn
      FunctionName: !GetAtt GameRankUpdate.Arn
      StartingPosition: TRIM_HORIZON

  GameRankReader:
    Type: AWS::Lambda::Function
    DependsOn:
      - VsCodeEc2
    Properties:
      FunctionName: game-rank-reader
      Runtime: python3.13
      Handler: GetRank.handler
      Role: !GetAtt GomokuGameRankReader.Arn
      Code:
        S3Bucket: !Ref GameSourceS3Bucket
        S3Key: Lambda/code.zip
      Timeout: 60
      Environment:
        Variables: 
          REDIS: !GetAtt GomokuRanking.RedisEndpoint.Address
      VpcConfig:
        SecurityGroupIds: 
          - !GetAtt GomokuDefault.GroupId
        SubnetIds: 
          - !Ref PublicSubneta
          - !Ref PublicSubnetb
          - !Ref PrivateSubneta
          - !Ref PrivateSubnetb
  GameRankReaderPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GameRankReader
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GomokuAPI}/*/GET/ranking

  GameMatchRequest:
    Type: AWS::Lambda::Function
    DependsOn:
      - VsCodeEc2
    Properties:
      FunctionName: game-match-request
      Runtime: python3.13
      Handler: MatchRequest.lambda_handler
      Role: !GetAtt GomokuGameMatchRequest.Arn
      Code:
        S3Bucket: !Ref GameSourceS3Bucket
        S3Key: Lambda/code.zip
      Timeout: 60
  GameMatchRequestPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GameMatchRequest
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GomokuAPI}/*/POST/matchrequest

  GameMatchStatus:
    Type: AWS::Lambda::Function
    DependsOn:
      - VsCodeEc2
    Properties:
      FunctionName: game-match-status
      Runtime: python3.13
      Handler: MatchStatus.lambda_handler
      Role: !GetAtt GomokuGameMatchStatus.Arn
      Code:
        S3Bucket: !Ref GameSourceS3Bucket
        S3Key: Lambda/code.zip
      Timeout: 60
  GameMatchStatusPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GameMatchStatus
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GomokuAPI}/*/POST/matchstatus

  GameMatchEvent:
    Type: AWS::Lambda::Function
    DependsOn:
      - VsCodeEc2
    Properties:
      FunctionName: game-match-event
      Runtime: python3.13
      Handler: MatchEvent.lambda_handler
      Role: !GetAtt GomokuGameMatchEvent.Arn
      Code:
        S3Bucket: !Ref GameSourceS3Bucket
        S3Key: Lambda/code.zip
      Timeout: 60
  GameMatchEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt GameMatchEvent.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SnsTopic
  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: gomoku-match-topic
  SnsTopicAccessPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: 2008-10-17
        Id: SnsTopicPolicy
        Statement: 
          - Sid: AllowSnsActions
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - SNS:GetTopicAttributes
              - SNS:SetTopicAttributes
              - SNS:AddPermission
              - SNS:RemovePermission
              - SNS:DeleteTopic
              - SNS:Subscribe
              - SNS:ListSubscriptionsByTopic
              - SNS:Publish
            Resource: !Sub arn:aws:sns:{AWS::Region}:{AWS::AccountId}:{SnsTopic.TopicName}
            Condition:
              StringEquals:
                AWS:SourceOwner: !Ref AWS::AccountId
          - Sid: AllowSnsPublish
            Effect: Allow
            Principal:
              Service: gamelift.amazonaws.com
            Action: SNS:Publish
            Resource: !Sub arn:aws:sns:{AWS::Region}:{AWS::AccountId}:{SnsTopic.TopicName}
      Topics: 
        - !Ref SnsTopic
  SnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt GameMatchEvent.Arn
      TopicArn: !Ref SnsTopic

  GomokuAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: GomokuAPI
      EndpointConfiguration:
        Types:
          - REGIONAL
  GomokuAPIRankingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GomokuAPI
      ParentId: !GetAtt GomokuAPI.RootResourceId
      PathPart: ranking
  GomokuAPIRankingGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GameRankReader.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - ResponseModels: 
            application/json: Empty
          ResponseParameters: 
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: 200
      ResourceId: !Ref GomokuAPIRankingResource
      RestApiId: !Ref GomokuAPI
  GomokuAPIRankingOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationHttpMethod: OPTIONS
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
      MethodResponses:
        - ResponseModels: 
            application/json: Empty
          ResponseParameters: 
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: 200
      ResourceId: !Ref GomokuAPIRankingResource
      RestApiId: !Ref GomokuAPI
  GomokuAPIMatchRequestResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GomokuAPI
      ParentId: !GetAtt GomokuAPI.RootResourceId
      PathPart: matchrequest
  GomokuAPIMatchRequestPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GameMatchRequest.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - ResponseModels: 
            application/json: Empty
          ResponseParameters: 
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: 200
      ResourceId: !Ref GomokuAPIMatchRequestResource
      RestApiId: !Ref GomokuAPI
  GomokuAPIMatchRequestOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationHttpMethod: OPTIONS
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
      MethodResponses:
        - ResponseModels: 
            application/json: Empty
          ResponseParameters: 
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: 200
      ResourceId: !Ref GomokuAPIMatchRequestResource
      RestApiId: !Ref GomokuAPI
  GomokuAPIMatchStatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GomokuAPI
      ParentId: !GetAtt GomokuAPI.RootResourceId
      PathPart: matchstatus
  GomokuAPIMatchStatusPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GameMatchStatus.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - ResponseModels: 
            application/json: Empty
          ResponseParameters: 
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: 200
      ResourceId: !Ref GomokuAPIMatchStatusResource
      RestApiId: !Ref GomokuAPI
  GomokuAPIMatchStatusOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationHttpMethod: OPTIONS
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
      MethodResponses:
        - ResponseModels: 
            application/json: Empty
          ResponseParameters: 
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: 200
      ResourceId: !Ref GomokuAPIMatchStatusResource
      RestApiId: !Ref GomokuAPI
  GomokuAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GomokuAPIRankingGet
      - GomokuAPIRankingOptions
      - GomokuAPIMatchRequestPost
      - GomokuAPIMatchRequestOptions
      - GomokuAPIMatchStatusPost
      - GomokuAPIMatchStatusOptions
    Properties:
      RestApiId: !Ref GomokuAPI
      StageName: prod

  GameLiftBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - gamelift.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GameLiftBuildPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:*Object*
                Resource:
                  - !Sub ${GameSourceS3Bucket.Arn}/*
  GameLiftBuild:
    Type: AWS::GameLift::Build
    DependsOn:
      - VsCodeEc2
    Properties:
      Name: GomokuServer-Build-1
      OperatingSystem: WINDOWS_2016
      StorageLocation:
        Bucket: !Ref GameSourceS3Bucket
        Key: bin/FlexMatch/GomokuServer/server.zip    
        RoleArn: !GetAtt GameLiftBuildRole.Arn
  GameLiftFleet:
    Type: AWS::GameLift::Fleet
    Properties:
      Name: GomokuGameServerFleet-1
      BuildId: !Ref GameLiftBuild
      ComputeType: EC2
      EC2InboundPermissions: 
        - FromPort: 49152
          ToPort: 60000
          IpRange: 0.0.0.0/0
          Protocol: TCP
      EC2InstanceType: c5.large
      FleetType: SPOT
      InstanceRoleARN: !GetAtt GomokuGameLiftFleetRole.Arn
      Locations: 
        - Location: !Ref AWS::Region
          LocationCapacity:
            MinSize: 1
            DesiredEC2Instances: 1
            MaxSize: 1
      RuntimeConfiguration: 
        GameSessionActivationTimeoutSeconds: 600
        MaxConcurrentGameSessionActivations: 2147483647
        ServerProcesses: 
          - ConcurrentExecutions: 50
            LaunchPath: C:\game\Binaries\Win64\GomokuServer.exe
  GameLiftAlias:
    Type: AWS::GameLift::Alias
    Properties:
      Name: GomokuAlias
      RoutingStrategy:
        Type: SIMPLE
        FleetId: !Ref GameLiftFleet
  GameLiftQueue:
    Type: AWS::GameLift::GameSessionQueue
    Properties:
      Name: gomoku-queue
      TimeoutInSeconds: 600
      Destinations: 
        - DestinationArn: !GetAtt GameLiftAlias.AliasArn
  GameLiftMatchmakingRuleSet:
    Type: AWS::GameLift::MatchmakingRuleSet
    Properties:
      Name: gomoku-matchmaking-rule
      RuleSetBody: !Sub |
        {
            "ruleLanguageVersion" : "1.0",
            "playerAttributes" :
            [
                {
                    "name" : "score",
                    "type" : "number",
                    "default" : 1000
                }
            ],
            "teams" :
            [
                {
                    "name" : "blue",
                    "maxPlayers" : 1,
                    "minPlayers" : 1
                },
                {
                    "name" : "red",
                    "maxPlayers" : 1,
                    "minPlayers" : 1
                }
            ],
            "rules" :
            [
                {   "name": "EqualTeamSizes",
                    "type": "comparison",
                    "measurements": [ "count(teams[red].players)" ],
                    "referenceValue": "count(teams[blue].players)",
                    "operation": "="
                },
                {
                    "name" : "FairTeamSkill",
                    "type" : "distance",
                    "measurements" : [ "avg(teams[*].players.attributes[score])" ],
                    "referenceValue" : "avg(flatten(teams[*].players.attributes[score]))",
                    "maxDistance" : 300
                }
            ],
            "expansions" :
            [
                {
                    "target" : "rules[FairTeamSkill].maxDistance",
                    "steps" :
                    [
                        {
                            "waitTimeSeconds" : 10,
                            "value" : 500
                        },
                        {
                            "waitTimeSeconds" : 20,
                            "value" : 800
                        },
                        {
                            "waitTimeSeconds" : 30,
                            "value" : 1000
                        }
                    ]
                }
            ]
        }
  GameLiftMatchmakingConfiguration:
    Type: AWS::GameLift::MatchmakingConfiguration
    Properties:
      Name: GomokuMatchConfig
      RequestTimeoutSeconds: 60
      AcceptanceRequired: False
      GameSessionQueueArns: 
        - !GetAtt GameLiftQueue.Arn
      RuleSetName: !GetAtt GameLiftMatchmakingRuleSet.Name
      NotificationTarget: !GetAtt SnsTopic.TopicArn

Outputs:
  VsCode:
    Value: !Sub http://${VsCodeEc2.PublicIp}:8000
    Description: Public IP Address of the VS Code
  GomokuAPI:
    Value: !Sub https://${GomokuAPI}.execute-api.${AWS::Region}.amazonaws.com/prod
    Description: Gomoku API URL