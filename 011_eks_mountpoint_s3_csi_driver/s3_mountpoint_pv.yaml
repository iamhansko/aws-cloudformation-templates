Transform: AWS::LanguageExtensions
Parameters:
  AmazonLinux2023AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
Mappings: 
  AzMapping: 
    a:
      PublicSubnetCidr: 10.0.0.0/24
      PrivateSubnetCidr: 10.0.1.0/24
    b: 
      PublicSubnetCidr: 10.0.2.0/24
      PrivateSubnetCidr: 10.0.3.0/24
    c: 
      PublicSubnetCidr: 10.0.4.0/24
      PrivateSubnetCidr: 10.0.5.0/24
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: igw
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: public-rt
      VpcId: !Ref Vpc
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  
  # PublicSubnets
  Fn::ForEach::PublicSubnets:
    - Az
    - [a, b]
    - PublicSubnet${Az}:
        Type: AWS::EC2::Subnet
        Properties:
          AvailabilityZone: !Sub ${AWS::Region}${Az}
          CidrBlock: !FindInMap [AzMapping, !Ref Az, PublicSubnetCidr]
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: !Sub public-subnet-${Az}
          VpcId: !Ref Vpc
      PublicSubnet${Az}RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PublicSubnetRouteTable
          SubnetId:
            Ref: !Sub PublicSubnet${Az}
  
  # PrivateSubnets
  Fn::ForEach::PrivateSubnets:
    - Az
    - [a, b]
    - PrivateSubnet${Az}:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref Vpc
          CidrBlock: !FindInMap [AzMapping, !Ref Az, PrivateSubnetCidr]
          AvailabilityZone: !Sub ${AWS::Region}${Az}
          Tags:
            - Key: Name
              Value: !Sub private-subnet-${Az}
      PrivateSubnet${Az}RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref Vpc
          Tags:
            - Key: Name
              Value: !Sub private-rt-${Az}
      Natgateway${Az}ElasticIp:
        Type: AWS::EC2::EIP
      NatGateway${Az}:
        Type: AWS::EC2::NatGateway
        Properties:
          AllocationId: !GetAtt
            - !Sub Natgateway${Az}ElasticIp
            - AllocationId
          SubnetId:
            Ref: !Sub PublicSubnet${Az}
          Tags: 
            - Key : Name
              Value : !Sub natgw-${Az}
      PrivateSubnet${Az}RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId:
            Ref: !Sub PrivateSubnet${Az}RouteTable
          SubnetId: 
            Ref: !Sub PrivateSubnet${Az}
      PrivateSubnet${Az}Route:
        Type: AWS::EC2::Route
        Properties:
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId:
            Ref: !Sub NatGateway${Az}
          RouteTableId:
            Ref: !Sub PrivateSubnet${Az}RouteTable

  BastionEc2:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: '1'        
        Timeout: PT30M
    Properties:
      InstanceType: t3.medium
      KeyName: !Ref KeyPair
      ImageId: !Ref AmazonLinux2023AmiId
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubneta
          GroupSet: 
            - !Ref BastionEc2SecurityGroup
            - !GetAtt EksCluster.ClusterSecurityGroupId
      IamInstanceProfile: !Ref BastionEc2InstanceProfile
      Tags: [{ Key: Name, Value: wsc2025-cicd-bastion }]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          dnf update -yq
          dnf groupinstall -yq "Development Tools"
          dnf install -yq python3.13
          ln -sf /usr/bin/python3.13 /usr/bin/python
          python -m ensurepip --upgrade

          export VSC_VERSION="4.102.3"
          wget https://github.com/coder/code-server/releases/download/v$VSC_VERSION/code-server-$VSC_VERSION-linux-amd64.tar.gz
          tar -xzf code-server-$VSC_VERSION-linux-amd64.tar.gz
          mv code-server-$VSC_VERSION-linux-amd64 /usr/local/lib/code-server
          ln -s /usr/local/lib/code-server/bin/code-server /usr/local/bin/code-server

          mkdir -p /home/ec2-user/.config/code-server
          cat <<EOF > /home/ec2-user/.config/code-server/config.yaml
          bind-addr: 0.0.0.0:8000
          auth: none
          cert: false
          EOF
          chown -R ec2-user:ec2-user /home/ec2-user/.config
          
          cat <<EOF > /etc/systemd/system/code-server.service
          [Unit]
          Description=VS Code Server
          After=network.target
          [Service]
          Type=simple
          User=ec2-user
          ExecStart=/usr/local/bin/code-server --config /home/ec2-user/.config/code-server/config.yaml /home/ec2-user
          Restart=always
          [Install]
          WantedBy=multi-user.target
          EOF
          systemctl daemon-reload
          systemctl enable code-server
          systemctl start code-server

          sudo -Eu ec2-user bash << 'EOF'
          cd /home/ec2-user
          mkdir -p /home/ec2-user/bin
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.33.0/2025-05-01/bin/linux/amd64/kubectl
          chmod +x kubectl
          mv kubectl /home/ec2-user/bin/kubectl
          export PATH=/home/ec2-user/bin:$PATH
          echo "export PATH=/home/ec2-user/bin:$PATH" >> ~/.bashrc
          echo "alias k=kubectl" >> ~/.bashrc
          echo "complete -o default -F __start_kubectl k" >> ~/.bashrc
          echo "source <(kubectl completion bash)" >> ~/.bashrc
          
          aws eks update-kubeconfig --region ${AWS::Region} --name ${EksCluster}

          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > /home/ec2-user/get_helm.sh
          chmod 700 /home/ec2-user/get_helm.sh
          /home/ec2-user/get_helm.sh

          mkdir -p /home/ec2-user/manifests
          echo $'apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: s3-pv
          spec:
            capacity:
              storage: 20Gi
            accessModes:
              - ReadWriteMany
            storageClassName: ""
            claimRef:
              namespace: default
              name: s3-pvc 
            mountOptions:
              - allow-delete
              - region ${AWS::Region}
              - prefix pod/
            csi:
              driver: s3.csi.aws.com
              volumeHandle: s3-csi-driver-volume
              volumeAttributes:
                bucketName: ${S3Bucket}
          ---
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: s3-pvc
          spec:
            accessModes:
              - ReadWriteMany
            storageClassName: ""
            resources:
              requests:
                storage: 20Gi 
            volumeName: s3-pv
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            name: s3-app
          spec:
            containers:
              - name: app
                image: ubuntu
                command: ["/bin/sh"]
                args: ["-c", "echo \'Hello from the container!\' >> /data/$(date -u).txt; tail -f /dev/null"]
                volumeMounts:
                  - name: persistent-storage
                    mountPath: /data
            volumes:
              - name: persistent-storage
                persistentVolumeClaim:
                  claimName: s3-pvc' > /home/ec2-user/manifests/pod.yaml
          EOF

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionEc2 --region ${AWS::Region}
  BastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Bastion EC2 SSH Connection"
      GroupName: bastion-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 8000
          IpProtocol: tcp
          ToPort: 8000
      VpcId: !Ref Vpc
  BastionEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  BastionEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref BastionEc2IamRole]
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]

  EksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Version: "1.32"
      AccessConfig: 
        AuthenticationMode: API_AND_CONFIG_MAP
        BootstrapClusterCreatorAdminPermissions: True
      Logging: 
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
            - Type: authenticator
            - Type: controllerManager
            - Type: scheduler
      ResourcesVpcConfig: 
        EndpointPrivateAccess: True
        EndpointPublicAccess: True
        SubnetIds: 
          - !Ref PublicSubneta
          - !Ref PublicSubnetb
          - !Ref PrivateSubneta
          - !Ref PrivateSubnetb
      RoleArn: !GetAtt EksClusterIamRole.Arn
      UpgradePolicy: 
        SupportType: STANDARD
      BootstrapSelfManagedAddons: False
  EksClusterIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
  BastionEc2IamAccessEntry:
    Type: AWS::EKS::AccessEntry
    Properties:
      ClusterName: !Ref EksCluster
      PrincipalArn: !GetAtt BastionEc2IamRole.Arn
      Type: STANDARD
      AccessPolicies: 
        - PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
          AccessScope:
            Type: cluster
  VpcCniAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: vpc-cni
      ClusterName: !Ref EksCluster
      ResolveConflicts: OVERWRITE
  KubeProxyAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: kube-proxy
      ClusterName: !Ref EksCluster
      ResolveConflicts: OVERWRITE
  CorednsAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: coredns
      ClusterName: !Ref EksCluster
      ResolveConflicts: OVERWRITE
  ManagedNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EksCluster
      AmiType: AL2023_x86_64_STANDARD
      InstanceTypes: 
        - t3.medium
      CapacityType: ON_DEMAND # SPOT | CAPACITY_BLOCK
      NodeRole: !GetAtt EksNodeIamRole.Arn
      ScalingConfig: 
        MinSize: 2
        DesiredSize: 2
        MaxSize: 2
      Subnets: 
        - !Ref PrivateSubneta
        - !Ref PrivateSubnetb
      LaunchTemplate:
        Id: !Ref
          Fn::Sub: LaunchTemplate
      NodeRepairConfig: 
        Enabled: True
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData: 
        KeyName: !Ref KeyPair
        SecurityGroupIds: 
          - !GetAtt EksCluster.ClusterSecurityGroupId
        TagSpecifications: 
          - ResourceType: instance
            Tags: 
              - Key: Name
                Value: !Sub eks-node
  EksNodeIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  
  EksOidcProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: !GetAtt EksCluster.OpenIdConnectIssuerUrl
      ClientIdList: 
        - sts.amazonaws.com
  MountpointS3CsiDriverAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: aws-mountpoint-s3-csi-driver
      ClusterName: !Ref EksCluster
      ResolveConflicts: OVERWRITE
      ServiceAccountRoleArn: !GetAtt MountpointS3CsiDriverIamRole.Arn
  MountpointS3CsiDriverIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: !Sub
        - |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Federated": "${EksOidcProvider.Arn}"
                      },
                      "Action": "sts:AssumeRoleWithWebIdentity",
                      "Condition": {
                          "StringEquals": {
                              "${OidcProvider}:sub": "system:serviceaccount:kube-system:s3-csi-driver-sa",
                              "${OidcProvider}:aud": "sts.amazonaws.com"
                          }
                      }
                  }
              ]
            }
        - OidcProvider: !Select [1, !Split ["//", !GetAtt EksCluster.OpenIdConnectIssuerUrl]]
      ManagedPolicyArns:
        - !GetAtt AmazonS3CSIDriverPolicy.PolicyArn
  AmazonS3CSIDriverPolicy:
    # https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/s3-csi-create.html
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource: [ !Sub "${S3Bucket.Arn}" ]
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:AbortMultipartUpload
              - s3:DeleteObject
            Resource: [ !Sub "${S3Bucket.Arn}/*" ]
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

Outputs:
  VsCode:
    Value: !Sub http://${BastionEc2.PublicIp}:8000
    Description: VsCode on BastionEC2