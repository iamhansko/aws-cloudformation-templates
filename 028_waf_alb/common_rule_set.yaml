AWSTemplateFormatVersion: 2010-09-09
Description: WAF (us-east-1)

Parameters:
  AmazonLinux2023AmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"
  DefaultVpcId:
    Type: AWS::EC2::VPC::Id
  DefaultVpcPublicSubnet1Id:
    Type: AWS::EC2::Subnet::Id
  DefaultVpcPublicSubnet2Id:
    Type: AWS::EC2::Subnet::Id

Resources:
  AppServerEc2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmazonLinux2023AmiId
      InstanceType: t3.small
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref DefaultVpcPublicSubnet1Id
          GroupSet: 
            - !Ref AppServerSecurityGroup
      Tags:
        - Key: Name
          Value: app-server
      UserData: 
        Fn::Base64: !Sub | # sudo tail -f /var/log/cloud-init-output.log
          #!/bin/bash
          dnf update -yq
          dnf groupinstall -yq "Development Tools"
          dnf install -yq python3.13
          ln -s /usr/bin/python3.13 /usr/bin/python
          python -m ensurepip --upgrade
          python -m pip install flask

          mkdir -p /home/ec2-user/utils
          cat <<EOF > /home/ec2-user/utils/query_builder.py
          def obscure_query(mode, **kwargs):
            if mode == "login":
                name = kwargs["name"]
                secret = kwargs["secret"]
                parts = ["SELECT", "*", "FROM", "secret_users", "WHERE"]
                parts.append(f"name='{name}'")
                parts.append("AND")
                parts.append(f"secret='{secret}'")
                return " ".join(parts)

            elif mode == "lookup":
                user_id = kwargs["id"]
                return f"""SELECT id, name, secret FROM secret_users WHERE id = {user_id}"""

            elif mode == "inspect":
                table = kwargs["table"]
                return f"""SELECT * FROM {table}"""

            return "SELECT 1"
          EOF

          cat <<EOF > /home/ec2-user/main.py
          from flask import Flask, request, jsonify
          from utils.query_builder import obscure_query
          import sqlite3
          import os

          app = Flask(__name__)
          DB_FILE = "challenge.db"

          def get_db():
              conn = sqlite3.connect(DB_FILE)
              conn.row_factory = sqlite3.Row
              return conn

          def init():
              if os.path.exists(DB_FILE):
                  os.remove(DB_FILE)
              conn = get_db()
              cur = conn.cursor()
              cur.execute("CREATE TABLE secret_users (id INTEGER, name TEXT, secret TEXT)")
              cur.executemany("INSERT INTO secret_users VALUES (?, ?, ?)", [
                  (1, 'admin', 'supersecret'),
                  (2, 'alice', 'flag{alice_flag}'),
                  (3, 'bob', 'flag{bob_flag}')
              ])
              conn.commit()

          @app.route("/", methods=["GET"])
          def index():
              return '''
              <h2>유저관리 시스템</h2>

              <form action="/login" method="get">
                  <h4>로그인</h4>
                  이름: <input type="text" name="name"><br>
                  비밀번호: <input type="text" name="secret"><br>
                  <input type="submit" value="로그인">
              </form><hr>

              <form action="/lookup" method="get">
                  <h4>ID 조회</h4>
                  ID: <input type="text" name="id">
                  <input type="submit" value="조회">
              </form><hr>
              '''

          @app.route("/login", methods=["GET"])
          def login():
              name = request.args.get("name", "")
              passwd = request.args.get("secret", "")
              q = obscure_query("login", name=name, secret=passwd)
              conn = get_db()
              try:
                  res = conn.execute(q).fetchone()
                  if res:
                      return f"✅ 환영합니다, {res['name']} 님!"
                  else:
                      return "❌ 로그인 실패"
              except Exception as e:
                  return f"❗ 오류 발생: {str(e)}"

          @app.route("/lookup", methods=["GET"])
          def lookup():
              id = request.args.get("id", "")
              q = obscure_query("lookup", id=id)
              conn = get_db()
              try:
                  res = conn.execute(q).fetchall()
                  return jsonify([dict(row) for row in res])
              except Exception as e:
                  return jsonify(error=str(e))

          if __name__ == "__main__":
              init()
              app.run(host="0.0.0.0", port=5000, debug=True)
          EOF
          chown ec2-user:ec2-user /home/ec2-user/main.py
          
          nohup python /home/ec2-user/main.py &

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AppServerEc2 --region ${AWS::Region}
  AppServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      VpcId: !Ref DefaultVpcId
      SecurityGroupIngress:
        # - IpProtocol: tcp
        #   FromPort: 5000
        #   ToPort: 5000
        #   SourceSecurityGroupId: !Ref AlbSecurityGroup
        # - IpProtocol: tcp
        #   FromPort: 5000
        #   ToPort: 5000
        #   SourceSecurityGroupId: !Ref BastionEc2SecurityGroup
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: alb
      Type: application
      Scheme: internet-facing
      Subnets: 
        - !Ref DefaultVpcPublicSubnet1Id
        - !Ref DefaultVpcPublicSubnet2Id
      SecurityGroups:
        - !Ref AlbSecurityGroup
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      VpcId: !Ref DefaultVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup
      LoadBalancerArn: !GetAtt Alb.LoadBalancerArn
      Port: 80
      Protocol: HTTP
  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: alb-tg
      Port: 5000
      Protocol: HTTP
      VpcId: !Ref DefaultVpcId
      TargetType: instance
      HealthCheckPath: /
      Targets:
        - Id: !Ref AppServerEc2
          Port: 5000

  Waf:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: waf
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: waf
      Rules:
        # https://docs.aws.amazon.com/ko_kr/waf/latest/developerguide/aws-managed-rule-groups-use-case.html#aws-managed-rule-groups-use-case-sql-db
        - Name: AWS-AWSManagedRulesSQLiRuleSet
          Priority: 1
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesSQLiRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: sqli-rule
        # https://docs.aws.amazon.com/ko_kr/waf/latest/developerguide/aws-managed-rule-groups-baseline.html#aws-managed-rule-groups-baseline-crs
        - Name: AWS-AWSManagedRulesCommonRuleSet
          Priority: 2
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: base-rule
  WafAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !GetAtt Alb.LoadBalancerArn
      WebACLArn: !GetAtt Waf.Arn
  
  BastionEc2:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: '1'                
        Timeout: PT7M
    Properties:
      IamInstanceProfile: !Ref BastionEc2InstanceProfile
      ImageId: !Ref AmazonLinux2023AmiId
      InstanceType: t3.small
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref DefaultVpcPublicSubnet1Id
          GroupSet: 
            - !Ref BastionEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: bastion
      UserData:
        # sudo tail -f /var/log/cloud-init-output.log
        Fn::Base64:
          !Sub |
            #!/bin/bash
            dnf update -yq
            dnf groupinstall -yq "Development Tools"
            dnf install -yq python3.13
            dnf install -y python3-pip
            ln -sf /usr/bin/python3.13 /usr/bin/python
            python -m ensurepip --upgrade

            wget https://github.com/coder/code-server/releases/download/v4.100.3/code-server-4.100.3-linux-amd64.tar.gz
            tar -xzf code-server-4.100.3-linux-amd64.tar.gz
            mv code-server-4.100.3-linux-amd64 /usr/local/lib/code-server
            ln -s /usr/local/lib/code-server/bin/code-server /usr/local/bin/code-server

            mkdir -p /home/ec2-user/.config/code-server
            cat <<EOF > /home/ec2-user/.config/code-server/config.yaml
            bind-addr: 0.0.0.0:8000
            auth: none
            cert: false
            EOF
            chown -R ec2-user:ec2-user /home/ec2-user/.config
            
            cat <<EOF > /etc/systemd/system/code-server.service
            [Unit]
            Description=VS Code Server
            After=network.target
            [Service]
            Type=simple
            User=ec2-user
            ExecStart=/usr/local/bin/code-server --config /home/ec2-user/.config/code-server/config.yaml /home/ec2-user
            Restart=always
            [Install]
            WantedBy=multi-user.target
            EOF
            systemctl daemon-reload
            systemctl enable code-server
            systemctl start code-server

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionEc2 --region ${AWS::Region}
  BastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Bastion EC2 SSH Connection"
      GroupName: bastion-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 8000
          IpProtocol: tcp
          ToPort: 8000
      VpcId: !Ref DefaultVpcId
  BastionEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: BastionEc2Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  BastionEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      # InstanceProfileName: BastionEc2Role
      Roles: 
        - !Ref BastionEc2IamRole
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]

Outputs:
  VsCode:
    Value: !Sub http://${BastionEc2.PublicIp}:8000
    Description: VsCode on BastionEC2
  KeyPairValue:
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/parameters/%252Fec2%252Fkeypair%252F${KeyPair.KeyPairId}
    Description: KeyPair Value