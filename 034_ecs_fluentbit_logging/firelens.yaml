AWSTemplateFormatVersion: '2010-09-09'
Description: Logging (eu-west-1)

Parameters:
  BastionEc2AmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"
  EcsAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id

Resources:
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.101.0.0/16
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: logging-vpc

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Select [0, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: logging-pub-a

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Select [1, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: logging-pub-b

  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: logging-igw
  IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref Igw
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: logging-pub-rt
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw
  PublicSubnetARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  
  BastionEc2:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: '1'                
        Timeout: PT7M
    Properties:
      InstanceType: t3.micro
      ImageId: !Ref BastionEc2AmiId
      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref BastionEc2InstanceProfile
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetA
          GroupSet: 
            - !Ref BastionEc2SecurityGroup
      Tags:
        - Key: Name
          Value: logging-bastion
      UserData:
        # sudo tail -f /var/log/cloud-init-output.log
        Fn::Base64:
          !Sub |
            #!/bin/bash
            dnf update -yq
            dnf groupinstall -yq "Development Tools"
            dnf install -y python3.12
            dnf install -y python3-pip
            ln -s /usr/bin/python3.12 /usr/bin/python

            dnf install -y git

            wget https://github.com/coder/code-server/releases/download/v4.100.3/code-server-4.100.3-linux-amd64.tar.gz
            tar -xzf code-server-4.100.3-linux-amd64.tar.gz
            mv code-server-4.100.3-linux-amd64 /usr/local/lib/code-server
            ln -s /usr/local/lib/code-server/bin/code-server /usr/local/bin/code-server

            mkdir -p /home/ec2-user/.config/code-server
            cat <<EOF > /home/ec2-user/.config/code-server/config.yaml
            bind-addr: 0.0.0.0:8000
            auth: none
            cert: false
            EOF
            chown -R ec2-user:ec2-user /home/ec2-user/.config
            
            cat <<EOF > /etc/systemd/system/code-server.service
            [Unit]
            Description=VS Code Server
            After=network.target
            [Service]
            Type=simple
            User=ec2-user
            ExecStart=/usr/local/bin/code-server --config /home/ec2-user/.config/code-server/config.yaml /home/ec2-user
            Restart=always
            [Install]
            WantedBy=multi-user.target
            EOF
            systemctl daemon-reload
            systemctl enable code-server
            systemctl start code-server

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionEc2 --region ${AWS::Region}
  BastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: bastion-ec2-sg
  BastionEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: BastionEc2Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  BastionEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BastionEc2IamRole
  BastionElasticIp:
    Type: AWS::EC2::EIP
  BastionElasticIpAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt BastionElasticIp.AllocationId
      InstanceId: !Ref BastionEc2

  AppEcr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: logging-ecr
      ImageScanningConfiguration:
        ScanOnPush: True
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageTagMutability: IMMUTABLE
  FluentbitEcr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: logging-fluentbit
      ImageScanningConfiguration:
        ScanOnPush: True
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageTagMutability: IMMUTABLE
  EcrSsmAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name: AWS-RunShellScript
      WaitForSuccessTimeoutSeconds: 900
      Targets:
        - Key: InstanceIds
          Values:
            - !Ref BastionEc2
      Parameters:
        commands: 
          # uid=0(root) gid=0(root) groups=0(root) context=system_u:system_r:unconfined_service_t:s0
          - !Sub |
              dnf install -yq docker
              systemctl start docker
              systemctl enable docker
              # usermod -aG docker ec2-user
              # newgrp docker
              chmod 666 /var/run/docker.sock

              su - ec2-user << EOF
              cd /home/ec2-user
              echo '#!/usr/bin/env python3

              import time
              import json
              import random
              from datetime import datetime

              LOG_LEVELS = ["INFO", "DEBUG", "WARNING", "ERROR", "CRITICAL"]

              MESSAGES = {
                  "INFO": "Service started successfully.",
                  "DEBUG": "Debugging variable state.",
                  "WARNING": "Memory usage nearing limit.",
                  "ERROR": "Unable to connect to database.",
                  "CRITICAL": "System failure! Immediate action required."
              }

              def generate_token():
                  return "".join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=16))

              def generate_log():
                  while True:
                      log_level = random.choice(LOG_LEVELS)
                      log_entry = {
                          "timestamp": datetime.utcnow().isoformat() + "Z",
                          "log_level": log_level,
                          "message": MESSAGES[log_level]
                      }

                      if log_level == "ERROR":
                          log_entry["token"] = generate_token()

                      print(json.dumps(log_entry))
                      time.sleep(random.uniform(0.5, 2.0))

              if __name__ == "__main__":
                  generate_log()' > log_generator.py
              
              aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
              
              echo 'FROM python:3.13-slim
              WORKDIR /app
              COPY log_generator.py .
              CMD ["python", "log_generator.py"]' > Dockerfile.app
              docker build -f Dockerfile.app -t ${AppEcr.RepositoryUri}:v1.0.0 .
              docker push ${AppEcr.RepositoryUri}:v1.0.0
              
              echo 'FROM public.ecr.aws/aws-observability/aws-for-fluent-bit:latest' > Dockerfile.fluentbit
              docker build -f Dockerfile.fluentbit -t ${FluentbitEcr.RepositoryUri}:v1.0.0 .
              docker push ${FluentbitEcr.RepositoryUri}:v1.0.0
              EOF

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: logging-cluster
  EcsEc2CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      # Name: ec2-capacity-provider
      AutoScalingGroupProvider: 
        AutoScalingGroupArn: !GetAtt EcsAsg.AutoScalingGroupARN
  EcsEc2CapacityProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      CapacityProviders: 
        - !Ref EcsEc2CapacityProvider
      Cluster: !Ref EcsCluster
      DefaultCapacityProviderStrategy: 
        - Base: 0
          CapacityProvider: !Ref EcsEc2CapacityProvider
          Weight: 100
  EcsAsg:
    DependsOn: EcsCluster
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      # AutoScalingGroupName: ecs-asg
      MinSize: "1"
      DesiredCapacity: "1"
      MaxSize: "1"
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      LaunchTemplate: 
        LaunchTemplateId: !Ref EcsLt
        Version: !GetAtt EcsLt.LatestVersionNumber
  EcsLt:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      # LaunchTemplateName: ecs-asg-lt
      LaunchTemplateData:
        ImageId: !Ref EcsAmiId
        InstanceType: t3.medium
        IamInstanceProfile: 
          Name: !Ref EcsContainerInstanceProfile
        NetworkInterfaces: 
          - DeviceIndex: 0
            AssociatePublicIpAddress: True
            Groups: 
              - !Ref EcsContainerInstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
            dnf install -y aws-cfn-bootstrap
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: required
        KeyName: !Ref KeyPair
        TagSpecifications:
          - ResourceType: instance
            Tags: 
              - Key: Name
                Value : ecs-container-instance
  EcsContainerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group"
      GroupName: ecs-container-instance-sg
      SecurityGroupIngress: 
        - IpProtocol: -1
          SourceSecurityGroupId: !GetAtt Vpc.DefaultSecurityGroup
      VpcId: !Ref Vpc
  EcsContainerInstanceIamRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: ContainerInstanceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        # https://docs.aws.amazon.com/ko_kr/AmazonECS/latest/developerguide/using_awslogs.html#ec2-considerations
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  EcsContainerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: ContainerInstanceProfile
      Roles: 
        - !Ref EcsContainerInstanceIamRole
  
  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - EcrSsmAssociation
    Properties:
      Family: logging-ecs-td
      Cpu: "512"
      Memory: "1024"
      ContainerDefinitions: 
        - Name: app-logger
          Image: !Sub ${AppEcr.RepositoryUri}:v1.0.0
          Essential: True
          LogConfiguration:
            LogDriver: awsfirelens
            Options:
              # https://docs.fluentbit.io/manual/data-pipeline/outputs/cloudwatch
              Name: cloudwatch_logs
              log_group_name: /logging/cloudwatch
              auto_create_group: "true"
              log_stream_prefix: "app-"
              region: !Ref AWS::Region
        - Name: log-router
          Image: !Sub ${FluentbitEcr.RepositoryUri}:v1.0.0 # public.ecr.aws/aws-observability/aws-for-fluent-bit:latest
          FirelensConfiguration:
            Type: fluentbit
          Essential: true
          # https://github.com/aws-samples/amazon-ecs-firelens-examples/blob/mainline/examples/fluent-bit/cloudwatchlogs/task-definition-cloudwatch_logs.json
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /fluentbit/cloudwatch
              awslogs-create-group: "true"
              awslogs-region: !Ref AWS::Region
          Environment:
            # https://github.com/aws/aws-for-fluent-bit/blob/mainline/troubleshooting/debugging.md#basic-techniques
            - Name: FLB_LOG_LEVEL
              Value: error
      # https://docs.aws.amazon.com/ko_kr/AmazonECS/latest/developerguide/networking-outbound.html#networking-public-subnet
      NetworkMode: bridge # awsvpc
      RequiresCompatibilities: 
        - EC2
      RuntimePlatform: 
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName : EcsTaskIamRole 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccessV2 
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName : EcsTaskExecutionIamRole 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/CloudWatchFullAccessV2

  EcsService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: logging-svc
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref EcsTaskDefinition
      DesiredCount: 2
      LaunchType: EC2
  EcsServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group"
      GroupName: ecs-service-sg
      SecurityGroupIngress: 
        - IpProtocol: -1
          SourceSecurityGroupId: !GetAtt Vpc.DefaultSecurityGroup
      VpcId: !Ref Vpc

Outputs:
  VsCode:
    Value: !Sub http://${BastionElasticIp}:8000
    Description: VsCode on BastionEC2
