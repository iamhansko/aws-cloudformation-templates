Transform: AWS::LanguageExtensions
Parameters:
  InboundFromAnywhere:
    Type: String
    Default: "False"
    AllowedValues: ["True", "False"]
    Description: SeucirtyGroup Inbound Rule (Source 0.0.0.0/0)
  KubernetesVersion:
    Description: EKS Cluster Kubernetes Version (1.XX)
    Type: String
    Default: "1.33"
    AllowedValues: ["1.31", "1.32", "1.33"]
  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
Conditions:
  SecurityGroupInboundFromAnywhere: !Equals [!Ref InboundFromAnywhere, "True"]

Mappings:
  AzMapping: 
    a:
      PublicSubnetCidr: 10.0.0.0/24
      PrivateSubnetCidr: 10.0.1.0/24
    b: 
      PublicSubnetCidr: 10.0.2.0/24
      PrivateSubnetCidr: 10.0.3.0/24
    c: 
      PublicSubnetCidr: 10.0.4.0/24
      PrivateSubnetCidr: 10.0.5.0/24

Resources:
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
  
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: igw
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: public-rt
      VpcId: !Ref Vpc
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable

  # PublicSubnets
  Fn::ForEach::PublicSubnets:
    - Az
    - [a, b]
    - PublicSubnet${Az}:
        Type: AWS::EC2::Subnet
        Properties:
          AvailabilityZone: !Sub ${AWS::Region}${Az}
          CidrBlock: !FindInMap [AzMapping, !Ref Az, PublicSubnetCidr]
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: !Sub public-subnet-${Az}
          VpcId: !Ref Vpc
      PublicSubnet${Az}RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PublicSubnetRouteTable
          SubnetId:
            Ref: !Sub PublicSubnet${Az}
  
  # PrivateSubnets
  Fn::ForEach::PrivateSubnets:
    - Az
    - [a, b]
    - PrivateSubnet${Az}:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref Vpc
          CidrBlock: !FindInMap [AzMapping, !Ref Az, PrivateSubnetCidr]
          AvailabilityZone: !Sub ${AWS::Region}${Az}
          Tags:
            - Key: Name
              Value: !Sub private-subnet-${Az}
      PrivateSubnet${Az}RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref Vpc
          Tags:
            - Key: Name
              Value: !Sub private-rt-${Az}
      Natgateway${Az}ElasticIp:
        Type: AWS::EC2::EIP
      NatGateway${Az}:
        Type: AWS::EC2::NatGateway
        Properties:
          AllocationId: !GetAtt
            - !Sub Natgateway${Az}ElasticIp
            - AllocationId
          SubnetId:
            Ref: !Sub PublicSubnet${Az}
          Tags: 
            - Key : Name
              Value : !Sub natgw-${Az}
      PrivateSubnet${Az}RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId:
            Ref: !Sub PrivateSubnet${Az}RouteTable
          SubnetId: 
            Ref: !Sub PrivateSubnet${Az}
      PrivateSubnet${Az}Route:
        Type: AWS::EC2::Route
        Properties:
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId:
            Ref: !Sub NatGateway${Az}
          RouteTableId:
            Ref: !Sub PrivateSubnet${Az}RouteTable

  VsCodeEc2:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: '1'                
        Timeout: PT7M
    Properties:
      ImageId: !Ref AmiId
      InstanceType: t3.medium
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubneta
          GroupSet: 
            - !GetAtt EksCluster.ClusterSecurityGroupId
            - !Ref VsCodeEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: vscode
      IamInstanceProfile: !Ref VsCodeEc2InstanceProfile
      UserData: 
        # sudo tail -f /var/log/cloud-init-output.log
        Fn::Base64: !Sub |
          #!/bin/bash
          dnf update -yq
          dnf install -yq git
          dnf groupinstall -yq "Development Tools"

          export VSC_VERSION="4.102.3"
          wget https://github.com/coder/code-server/releases/download/v$VSC_VERSION/code-server-$VSC_VERSION-linux-amd64.tar.gz
          tar -xzf code-server-$VSC_VERSION-linux-amd64.tar.gz
          mv code-server-$VSC_VERSION-linux-amd64 /usr/local/lib/code-server
          ln -s /usr/local/lib/code-server/bin/code-server /usr/local/bin/code-server
          mkdir -p /home/ec2-user/.config/code-server
          cat <<EOF > /home/ec2-user/.config/code-server/config.yaml
          bind-addr: 0.0.0.0:8000
          auth: none
          cert: false
          EOF
          chown -R ec2-user:ec2-user /home/ec2-user/.config
          cat <<EOF > /etc/systemd/system/code-server.service
          [Unit]
          Description=VS Code Server
          After=network.target
          [Service]
          Type=simple
          User=ec2-user
          ExecStart=/usr/local/bin/code-server --config /home/ec2-user/.config/code-server/config.yaml /home/ec2-user
          Restart=always
          [Install]
          WantedBy=multi-user.target
          EOF
          systemctl daemon-reload
          systemctl enable code-server
          systemctl start code-server

          sudo -Eu ec2-user bash << 'EOF'
          cd /home/ec2-user
          mkdir -p /home/ec2-user/bin
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.33.3/2025-08-03/bin/linux/amd64/kubectl
          chmod +x kubectl
          mv kubectl /home/ec2-user/bin/kubectl
          export PATH=/home/ec2-user/bin:$PATH
          echo "export PATH=/home/ec2-user/bin:$PATH" >> ~/.bashrc
          echo "alias k=kubectl" >> ~/.bashrc
          echo "complete -o default -F __start_kubectl k" >> ~/.bashrc
          echo "source <(kubectl completion bash)" >> ~/.bashrc
          exec bash
          aws eks update-kubeconfig --region ${AWS::Region} --name ${EksCluster}

          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > /home/ec2-user/get_helm.sh
          chmod 700 /home/ec2-user/get_helm.sh
          /home/ec2-user/get_helm.sh

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource VsCodeEc2 --region ${AWS::Region}

          helm repo add eks https://aws.github.io/eks-charts
          helm repo update eks
          helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system \
          --set clusterName=${EksCluster} \
          --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="${AWSLoadBalancerControllerRole.Arn}" \
          --set serviceAccount.name=aws-load-balancer-controller \
          --set region=${AWS::Region} \
          --set vpcId=${Vpc} \
          --wait
          EOF
  VsCodeEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      GroupName: bastion-sg
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        !If [SecurityGroupInboundFromAnywhere, [{
          "IpProtocol": "tcp",
          "FromPort": 8000,
          "ToPort": 8000,
          "CidrIp": "0.0.0.0/0"
        }], []]
      Tags:
        - Key: Name
          Value: bastion-sg
  VsCodeEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  VsCodeEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: 
        - !Ref VsCodeEc2IamRole

  EksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Version: !Ref KubernetesVersion
      AccessConfig: 
        AuthenticationMode: API_AND_CONFIG_MAP
        BootstrapClusterCreatorAdminPermissions: true
      BootstrapSelfManagedAddons: true
      Logging: 
        ClusterLogging: 
          EnabledTypes: 
            - Type: api
            - Type: audit
            - Type: authenticator
            - Type: controllerManager
            - Type: scheduler
      ResourcesVpcConfig: 
        EndpointPrivateAccess: true
        EndpointPublicAccess: false
        SubnetIds: 
          - !Ref PublicSubneta
          - !Ref PublicSubnetb
          - !Ref PrivateSubneta
          - !Ref PrivateSubnetb
      RoleArn: !GetAtt EksClusterIamRole.Arn
  VsCodeEc2IamAccessEntry:
    Type: AWS::EKS::AccessEntry
    Properties:
      AccessPolicies: 
        - AccessScope: 
            Type: cluster
          PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
      ClusterName: !Ref EksCluster
      PrincipalArn: !GetAtt VsCodeEc2IamRole.Arn
      Type: STANDARD
  EksOidcProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: !GetAtt EksCluster.OpenIdConnectIssuerUrl
      ClientIdList: 
        - sts.amazonaws.com

  CoreNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      NodegroupName: core-nodegroup
      AmiType: AL2023_x86_64_STANDARD
      InstanceTypes: 
        - t3.medium #c5.large
      CapacityType: ON_DEMAND
      ClusterName: !Ref EksCluster
      ForceUpdateEnabled: true
      NodeRole: !GetAtt EksNodeIamRole.Arn
      ScalingConfig: 
        DesiredSize: 2
        MaxSize: 4
        MinSize: 2
      Subnets: 
        - !Ref PrivateSubneta
        - !Ref PrivateSubnetb
  EksClusterIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
  EksNodeIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  
  NlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      GroupName: nlb-sg
      SecurityGroupIngress:
        - !If [SecurityGroupInboundFromAnywhere, {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          }, !Ref AWS::NoValue]
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: nlb-sg
  AWSLoadBalancerControllerRole:
    # https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/refs/heads/main/docs/install/iam_policy.json
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: !Sub
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Federated": "${EksOidcProvider.Arn}"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                        "StringEquals": {
                            "${OidcProvider}:sub": "system:serviceaccount:kube-system:aws-load-balancer-controller",
                            "${OidcProvider}:aud": "sts.amazonaws.com"
                        }
                    }
                }
            ]
          }
        - OidcProvider: !Select [1, !Split ["//", !GetAtt EksCluster.OpenIdConnectIssuerUrl]]
      Policies:
        - PolicyName: AWSLoadBalancerControllerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "iam:CreateServiceLinkedRole"
                Resource: "*"
                Condition:
                  StringEquals: 
                    "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
              - Effect: "Allow"
                Action: 
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                Resource: "*"
              - Effect: "Allow"
                Action: 
                  - "cognito-idp:DescribeUserPoolClient"
                  - "acm:ListCertificates"
                  - "acm:DescribeCertificate"
                  - "iam:ListServerCertificates"
                  - "iam:GetServerCertificate"
                  - "waf-regional:GetWebACL"
                  - "waf-regional:GetWebACLForResource"
                  - "waf-regional:AssociateWebACL"
                  - "waf-regional:DisassociateWebACL"
                  - "wafv2:GetWebACL"
                  - "wafv2:GetWebACLForResource"
                  - "wafv2:AssociateWebACL"
                  - "wafv2:DisassociateWebACL"
                  - "shield:GetSubscriptionState"
                  - "shield:DescribeProtection"
                  - "shield:CreateProtection"
                  - "shield:DeleteProtection"
                Resource: "*"
  
  SsmAssociation:
    Type: AWS::SSM::Association
    DependsOn:
      - VsCodeEc2 # Required
      - CoreNodeGroup
    Properties:
      Name: AWS-RunShellScript
      WaitForSuccessTimeoutSeconds: 600
      Targets:
        - Key: InstanceIds
          Values:
            - !Ref VsCodeEc2
      Parameters:
        commands: 
          # uid=0(root) gid=0(root) groups=0(root) context=system_u:system_r:unconfined_service_t:s0
          - !Sub |
              su - ec2-user << 'SSMEOF'
              export HOME=/home/ec2-user && cd $HOME
              aws eks update-kubeconfig --region ${AWS::Region} --name ${EksCluster}
              mkdir -p /home/ec2-user/manifests

              kubectl rollout status -n kube-system deployment aws-load-balancer-controller
              sleep 60

              echo '#!/bin/bash
              helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
              helm repo update ingress-nginx

              helm upgrade --install ingress-nginx-a ingress-nginx/ingress-nginx -n kube-system \
              --set controller.ingressClassResource.name=a \
              --set controller.ingressClassResource.controllerValue=ingress.nginx/a \
              --set controller.service.type=LoadBalancer \
              --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-name"=a \
              --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-scheme"=internet-facing \
              --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-nlb-target-type"=ip \
              --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-security-groups"=${NlbSecurityGroup} \
              --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-manage-backend-security-group-rules"="true" \
              --wait
              
              helm upgrade --install ingress-nginx-b ingress-nginx/ingress-nginx -n kube-system \
              --set controller.ingressClassResource.name=b \
              --set controller.ingressClassResource.controllerValue=ingress.nginx/b \
              --set controller.service.type=LoadBalancer \
              --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-name"=b \
              --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-scheme"=internet-facing \
              --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-nlb-target-type"=ip \
              --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-security-groups"=${NlbSecurityGroup} \
              --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-manage-backend-security-group-rules"="true" \
              --wait' > /home/ec2-user/ingress_nginx_controller.sh && chmod +x /home/ec2-user/ingress_nginx_controller.sh && /home/ec2-user/ingress_nginx_controller.sh

              echo 'apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: todo
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: todo-app
                template:
                  metadata:
                    labels:
                      app: todo-app
                  spec:
                    containers:
                    - name: fastapi
                      image: sce06147/fastapi-todo-app:latest
                      ports:
                      - containerPort: 8000
                      command:
                        - "bash"
                        - "-c"
                        - "poetry run python -m api.migrate_db && poetry run uvicorn api.main:app --host 0.0.0.0 --root-path /v1"
                      env:
                      - name: WATCHFILES_FORCE_POLLING
                        value: "true"
                      - name: DB_HOST
                        value: "localhost"
                      - name: DB_PORT
                        value: "3306"
                    - name: mysql
                      image: mysql:8.0
                      ports:
                      - containerPort: 3306
                      env:
                      - name: MYSQL_ALLOW_EMPTY_PASSWORD
                        value: "yes"
                      - name: MYSQL_DATABASE
                        value: "demo"
                      - name: TZ
                        value: "Asia/Seoul"
                      volumeMounts:
                      - name: gp3-volume
                        mountPath: /var/lib/mysql
                    - name: dnsutils
                      image: registry.k8s.io/e2e-test-images/agnhost:2.39
                    restartPolicy: Always
                    volumes:
                    - name: gp3-volume
                      persistentVolumeClaim:
                        claimName: gp3-pvc
              ---
              apiVersion: v1
              kind: Service
              metadata:
                name: todo-service
              spec:
                selector:
                  app: todo-app
                ports:
                - port: 8000
                  targetPort: 8000
              ---
              apiVersion: networking.k8s.io/v1
              kind: Ingress
              metadata:
                name: ingress
                annotations:
                  nginx.ingress.kubernetes.io/rewrite-target: "/$1"
              spec:
                ingressClassName: a
                rules:
                  - http:
                      paths:
                      - path: /v1/(.*)
                        pathType: ImplementationSpecific
                        backend:
                          service:
                            name: todo-service
                            port:
                              number: 8000
              ---
              apiVersion: storage.k8s.io/v1
              kind: StorageClass
              metadata:
                name: gp3
              parameters:
                type: gp3
              provisioner: ebs.csi.aws.com
              reclaimPolicy: Delete
              volumeBindingMode: WaitForFirstConsumer
              ---
              apiVersion: v1
              kind: PersistentVolumeClaim
              metadata:
                name: gp3-pvc
              spec:
                accessModes:
                  - ReadWriteOnce
                storageClassName: gp3
                resources:
                  requests:
                    storage: 3Gi' > /home/ec2-user/manifests/fastapi.yaml && kubectl apply -f /home/ec2-user/manifests/fastapi.yaml
              SSMEOF
  
  EbsCsiDriverAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: aws-ebs-csi-driver
      ClusterName: !Ref EksCluster
      ServiceAccountRoleArn: !GetAtt EbsCsiDriverAddonIamRole.Arn
  EbsCsiDriverAddonIamRole:
    Type: AWS::IAM::Role
    Properties:
      # https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/ebs-csi.html
      AssumeRolePolicyDocument: !Sub
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Federated": "${EksOidcProvider.Arn}"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                        "StringEquals": {
                            "${OidcProvider}:sub": "system:serviceaccount:kube-system:ebs-csi-controller-sa",
                            "${OidcProvider}:aud": "sts.amazonaws.com"
                        }
                    }
                }
            ]
          }
        - OidcProvider: !Select [1, !Split ["//", !GetAtt EksCluster.OpenIdConnectIssuerUrl]]
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy

Outputs:
  VsCode:
    Value: !Sub http://${VsCodeEc2.PublicIp}:8000
    Description: Public IP Address of the VS Code