Transform: AWS::LanguageExtensions
Parameters:
  AmazonLinux2023AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
Mappings: 
  AzMapping: 
    a:
      PublicSubnetCidr: 10.0.0.0/24
      PrivateSubnetCidr: 10.0.1.0/24
    b: 
      PublicSubnetCidr: 10.0.2.0/24
      PrivateSubnetCidr: 10.0.3.0/24
    c: 
      PublicSubnetCidr: 10.0.4.0/24
      PrivateSubnetCidr: 10.0.5.0/24
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: igw
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: public-rt
      VpcId: !Ref Vpc
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  
  # PublicSubnets
  Fn::ForEach::PublicSubnets:
    - Az
    - [a, b]
    - PublicSubnet${Az}:
        Type: AWS::EC2::Subnet
        Properties:
          AvailabilityZone: !Sub ${AWS::Region}${Az}
          CidrBlock: !FindInMap [AzMapping, !Ref Az, PublicSubnetCidr]
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: !Sub public-subnet-${Az}
          VpcId: !Ref Vpc
      PublicSubnet${Az}RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PublicSubnetRouteTable
          SubnetId:
            Ref: !Sub PublicSubnet${Az}
  
  # PrivateSubnets
  Fn::ForEach::PrivateSubnets:
    - Az
    - [a, b]
    - PrivateSubnet${Az}:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref Vpc
          CidrBlock: !FindInMap [AzMapping, !Ref Az, PrivateSubnetCidr]
          AvailabilityZone: !Sub ${AWS::Region}${Az}
          Tags:
            - Key: Name
              Value: !Sub private-subnet-${Az}
      PrivateSubnet${Az}RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref Vpc
          Tags:
            - Key: Name
              Value: !Sub private-rt-${Az}
      Natgateway${Az}ElasticIp:
        Type: AWS::EC2::EIP
      NatGateway${Az}:
        Type: AWS::EC2::NatGateway
        Properties:
          AllocationId: !GetAtt
            - !Sub Natgateway${Az}ElasticIp
            - AllocationId
          SubnetId:
            Ref: !Sub PublicSubnet${Az}
          Tags: 
            - Key : Name
              Value : !Sub natgw-${Az}
      PrivateSubnet${Az}RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId:
            Ref: !Sub PrivateSubnet${Az}RouteTable
          SubnetId: 
            Ref: !Sub PrivateSubnet${Az}
      PrivateSubnet${Az}Route:
        Type: AWS::EC2::Route
        Properties:
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId:
            Ref: !Sub NatGateway${Az}
          RouteTableId:
            Ref: !Sub PrivateSubnet${Az}RouteTable

  BastionEc2:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: '1'        
        Timeout: PT7M
    Properties:
      InstanceType: t3.medium
      KeyName: !Ref KeyPair
      ImageId: !Ref AmazonLinux2023AmiId
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubneta
          GroupSet: 
            - !Ref BastionEc2SecurityGroup
            - !Ref EksClusterSecurityGroup
      IamInstanceProfile: !Ref BastionEc2InstanceProfile
      Tags: [{ Key: Name, Value: bastion }]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          dnf update -yq
          dnf groupinstall -yq "Development Tools"
          dnf install -yq python3.13
          ln -sf /usr/bin/python3.13 /usr/bin/python
          python -m ensurepip --upgrade

          export VSC_VERSION="4.102.3"
          wget https://github.com/coder/code-server/releases/download/v$VSC_VERSION/code-server-$VSC_VERSION-linux-amd64.tar.gz
          tar -xzf code-server-$VSC_VERSION-linux-amd64.tar.gz
          mv code-server-$VSC_VERSION-linux-amd64 /usr/local/lib/code-server
          ln -s /usr/local/lib/code-server/bin/code-server /usr/local/bin/code-server

          mkdir -p /home/ec2-user/.config/code-server
          cat <<EOF > /home/ec2-user/.config/code-server/config.yaml
          bind-addr: 0.0.0.0:8000
          auth: none
          cert: false
          EOF
          chown -R ec2-user:ec2-user /home/ec2-user/.config
          
          cat <<EOF > /etc/systemd/system/code-server.service
          [Unit]
          Description=VS Code Server
          After=network.target
          [Service]
          Type=simple
          User=ec2-user
          ExecStart=/usr/local/bin/code-server --config /home/ec2-user/.config/code-server/config.yaml /home/ec2-user
          Restart=always
          [Install]
          WantedBy=multi-user.target
          EOF
          systemctl daemon-reload
          systemctl enable code-server
          systemctl start code-server

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionEc2 --region ${AWS::Region}

          dnf install -yq git
          dnf install -yq docker
          dnf install -yq bash-completion
          systemctl enable --now docker
          # usermod -aG docker ec2-user
          # newgrp docker
          chmod 666 /var/run/docker.sock

          su - ec2-user << 'EOF'
          export HOME=/home/ec2-user
          cd $HOME
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.33.0/2025-05-01/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
          echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
          echo 'source /usr/share/bash-completion/bash_completion' >> ~/.bashrc
          echo 'source <(kubectl completion bash)' >> ~/.bashrc
          echo 'alias k=kubectl' >> ~/.bashrc
          echo 'complete -o default -F __start_kubectl k' >> ~/.bashrc

          curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz"
          tar -xzf eksctl_$(uname -s)_amd64.tar.gz -C /tmp && rm eksctl_$(uname -s)_amd64.tar.gz
          sudo install -m 0755 /tmp/eksctl /usr/local/bin && rm /tmp/eksctl

          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

          mkdir -p /home/ec2-user/manifests
          echo 'apiVersion: karpenter.sh/v1
          kind: NodePool
          metadata:
            name: default
          spec:
            template:
              spec:
                nodeClassRef:
                  group: karpenter.k8s.aws
                  kind: EC2NodeClass
                  name: default
                requirements:
                  - key: "karpenter.k8s.aws/instance-family"
                    operator: In
                    values: ["t3"]
                  - key: "karpenter.k8s.aws/instance-cpu"
                    operator: Gt
                    values: ["1"]
                  - key: "karpenter.k8s.aws/instance-memory"
                    operator: Gt
                    values: ["2048"]
                  - key: "kubernetes.io/arch"
                    operator: In
                    values: ["amd64"]
                  - key: "karpenter.sh/capacity-type"
                    operator: In
                    values: ["on-demand"]
                  - key: "karpenter-nodepool"
                    operator: Exists
          ---
          apiVersion: karpenter.k8s.aws/v1
          kind: EC2NodeClass
          metadata:
            name: default
          spec:
            subnetSelectorTerms:
              - id: ${PrivateSubneta}
              - id: ${PrivateSubnetb}
            securityGroupSelectorTerms:
              - id: ${EksClusterSecurityGroup.GroupId}
            role: ${KarpenterNodeIamRole}
            amiSelectorTerms:
              - alias: al2023@latest
            userData: |
              #!/bin/bash
              timedatectl set-timezone Asia/Seoul
            tags:
              Name: Karpenter-Node' > /home/ec2-user/manifests/nodepool.yaml
          echo 'apiVersion: apps/v1
          kind: Deployment
          metadata:
            labels:
              app: nginx
            name: nginx
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: nginx
            template:
              metadata:
                labels:
                  app: nginx
              spec:
                nodeSelector:
                  karpenter-nodepool: deafult
                containers:
                - image: nginx
                  name: nginx' > /home/ec2-user/manifests/deployment.yaml
          EOF
  BastionEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Bastion EC2 SSH Connection"
      GroupName: bastion-sg
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 8000
          IpProtocol: tcp
          ToPort: 8000
      VpcId: !Ref Vpc
  BastionEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  BastionEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref BastionEc2IamRole]
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]

  Fn::ForEach::EksClusters:
    - Name
    - - ForkFailedOutOfPID
      # - InterfaceNotRunning
      - InterfaceNotUp
      - IPAMDNotReady
      # - IPAMDNotRunning
      - MissingLoopbackInterface
      - PodStuckTerminating
      - XFSSmallAverageClusterSize
    - ${Name}EksCluster:
        Type: AWS::EKS::Cluster
        Properties:
          Version: "1.32"
          AccessConfig: 
            AuthenticationMode: API_AND_CONFIG_MAP
            BootstrapClusterCreatorAdminPermissions: True
          Logging: 
            ClusterLogging:
              EnabledTypes:
                - Type: api
                - Type: audit
                - Type: authenticator
                - Type: controllerManager
                - Type: scheduler
          ResourcesVpcConfig: 
            EndpointPrivateAccess: True
            EndpointPublicAccess: True
            SubnetIds: 
              - !Ref PublicSubneta
              - !Ref PublicSubnetb
              - !Ref PrivateSubneta
              - !Ref PrivateSubnetb
            SecurityGroupIds:
              - !GetAtt EksClusterSecurityGroup.GroupId
          RoleArn: !GetAtt EksClusterIamRole.Arn
          UpgradePolicy: 
            SupportType: STANDARD
          BootstrapSelfManagedAddons: False
      ${Name}EksOidcProvider:
        Type: AWS::IAM::OIDCProvider
        Properties:
          Url: !GetAtt 
            - !Sub ${Name}EksCluster
            - OpenIdConnectIssuerUrl
          ClientIdList: 
            - sts.amazonaws.com
      ${Name}BastionEc2IamAccessEntry:
        Type: AWS::EKS::AccessEntry
        Properties:
          ClusterName: !Ref 
            Fn::Sub: ${Name}EksCluster
          PrincipalArn: !GetAtt BastionEc2IamRole.Arn
          Type: STANDARD
          AccessPolicies: 
            - PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
              AccessScope:
                Type: cluster
      ${Name}VpcCniAddon:
        Type: AWS::EKS::Addon
        Properties:
          AddonName: vpc-cni
          ClusterName: !Ref 
            Fn::Sub: ${Name}EksCluster
          ResolveConflicts: OVERWRITE
      ${Name}KubeProxyAddon:
        Type: AWS::EKS::Addon
        Properties:
          AddonName: kube-proxy
          ClusterName: !Ref 
            Fn::Sub: ${Name}EksCluster
          ResolveConflicts: OVERWRITE
      ${Name}CorednsAddon:
        Type: AWS::EKS::Addon
        Properties:
          AddonName: coredns
          ClusterName: !Ref 
            Fn::Sub: ${Name}EksCluster
          ResolveConflicts: OVERWRITE
      ${Name}PodIdentityAgentAddon:
        Type: AWS::EKS::Addon
        Properties:
          AddonName: eks-pod-identity-agent
          ClusterName: !Ref 
            Fn::Sub: ${Name}EksCluster
          ResolveConflicts: OVERWRITE
      ${Name}CloudWatchObservabilityAddon:
        Type: AWS::EKS::Addon
        DependsOn:
          - !Sub ${Name}PodIdentityAgentAddon
        Properties:
          AddonName: amazon-cloudwatch-observability
          ClusterName: !Ref 
            Fn::Sub: ${Name}EksCluster
          ResolveConflicts: OVERWRITE
          PodIdentityAssociations:
            - RoleArn: !GetAtt CloudWatchObservabilityIamRole.Arn
              ServiceAccount: cloudwatch-agent
          ConfigurationValues: |
            containerLogs:
              fluentBit:
                config:
                  extraFiles:
                    application-log.conf: ""
                    dataplane-log.conf: ""
                    node-monitoring-agent.conf: |
                      [INPUT]
                        Name                tail
                        Tag                 node-monitoring-agent.*
                        Path                /var/log/containers/eks-node-monitoring-agent-*_kube-system_*.log
                        multiline.parser    docker, cri
                        DB                  /var/fluent-bit/state/flb-node-monitoring-agent.db
                        Mem_Buf_Limit       50MB
                        Skip_Long_Lines     On
                        Refresh_Interval    10
                        Rotate_Wait         30
                        storage.type        filesystem
                        Read_from_Head      ${READ_FROM_HEAD}

                      [FILTER]
                        Name                kubernetes
                        Match               node-monitoring-agent.*
                        Kube_Tag_Prefix     node-monitoring-agent.var.log.containers.
                        Kube_URL            https://kubernetes.default.svc:443
                        Merge_Log           On
                        Merge_Log_Key       log_processed
                        K8S-Logging.Parser  On
                        K8S-Logging.Exclude Off
                        Labels              Off
                        Annotations         Off
                        Use_Kubelet         On
                        Kubelet_Port        10250
                        Buffer_Size         0
                        Use_Pod_Association On
                      
                      [FILTER]
                        Name                nest
                        Match               node-monitoring-agent.*
                        Operation           lift
                        Nested_under        kubernetes
                      
                      [FILTER]
                        Name                modify
                        Match               node-monitoring-agent.*
                        Rename              pod_name pod
                        Rename              container_name container
                        Rename              namespace_name namespace
                        Rename              host node
                      
                      [FILTER]
                        Name                record_modifier
                        Match               node-monitoring-agent.*
                        Allowlist_key       log
                        Allowlist_key       pod
                        Allowlist_key       container
                        Allowlist_key       namespace
                        Allowlist_key       node

                      [OUTPUT]
                        Name                cloudwatch_logs
                        Match               node-monitoring-agent.*
                        region              ${AWS_REGION}
                        log_group_name      /aws/eks/${CLUSTER_NAME}/node-monitoring-agent
                        log_stream_prefix   node-monitoring-agent-
                        log_stream_template $pod.FROM.${HOST_NAME}
                        auto_create_group   true
                        extra_user_agent    container-insights
                        add_entity          true
      ${Name}NodeMonitoringAgentAddon:
        Type: AWS::EKS::Addon
        Properties:
          AddonName: eks-node-monitoring-agent
          ClusterName: !Ref 
            Fn::Sub: ${Name}EksCluster
          ResolveConflicts: OVERWRITE
      ${Name}ManagedNodeGroup:
        Type: AWS::EKS::Nodegroup
        Properties:
          ClusterName: !Ref 
            Fn::Sub: ${Name}EksCluster
          AmiType: AL2023_x86_64_STANDARD
          InstanceTypes: 
            - t3.medium
          CapacityType: ON_DEMAND # SPOT | CAPACITY_BLOCK
          NodeRole: !GetAtt EksNodeIamRole.Arn
          ScalingConfig: 
            MinSize: 3
            DesiredSize: 3
            MaxSize: 3
          Subnets: 
            - !Ref PrivateSubneta
            - !Ref PrivateSubnetb
          LaunchTemplate:
            Id: !Ref
              Fn::Sub: ${Name}LaunchTemplate
          NodeRepairConfig: 
            Enabled: True
      ${Name}LaunchTemplate:
        Type: AWS::EC2::LaunchTemplate
        Properties:
          LaunchTemplateData: 
            KeyName: !Ref KeyPair
            SecurityGroupIds: 
              - !Ref EksClusterSecurityGroup
            TagSpecifications: 
              - ResourceType: instance
                Tags: 
                  - Key: Name
                    Value: !Sub ${Name}-Node
      ${Name}KarpenterControllerIamRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument: !Sub
            - |
                {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Principal": {
                              "Federated": "${OidcProviderArn}"
                          },
                          "Action": "sts:AssumeRoleWithWebIdentity",
                          "Condition": {
                              "StringEquals": {
                                  "${OidcProvider}:sub": "system:serviceaccount:kube-system:karpenter",
                                  "${OidcProvider}:aud": "sts.amazonaws.com"
                              }
                          }
                      }
                  ]
                }
            - OidcProviderArn: !GetAtt
                - !Sub ${Name}EksOidcProvider
                - Arn
              OidcProvider: !Select 
                - 1
                - !Split 
                  - '//'
                  - !GetAtt 
                    - !Sub ${Name}EksCluster
                    - OpenIdConnectIssuerUrl
          ManagedPolicyArns:
            # https://raw.githubusercontent.com/aws/karpenter-provider-aws/v1.6.0/website/content/en/preview/getting-started/getting-started-with-karpenter/cloudformation.yaml
            - arn:aws:iam::aws:policy/AdministratorAccess
      ${Name}KarpenterNodeIamAccessEntry:
        Type: AWS::EKS::AccessEntry
        Properties:
          ClusterName: !Ref 
            Fn::Sub: ${Name}EksCluster
          PrincipalArn: !GetAtt KarpenterNodeIamRole.Arn
          Type: EC2_LINUX
      ${Name}SsmAssociation:
        Type: AWS::SSM::Association
        Properties:
          Name: AWS-RunShellScript
          WaitForSuccessTimeoutSeconds: 300
          Targets:
            - Key: InstanceIds
              Values:
                - !Ref BastionEc2
          Parameters:
            commands: 
              # uid=0(root) gid=0(root) groups=0(root) context=system_u:system_r:unconfined_service_t:s0
              - !Sub 
                  - |
                    su - ec2-user << 'EOF'
                    mkdir -p /home/ec2-user/${Name}
                    echo '#!/bin/bash
                    aws eks update-kubeconfig --name ${ClusterName}
                    export KARPENTER_NAMESPACE="kube-system"
                    export KARPENTER_VERSION="1.6.0"
                    export K8S_VERSION="1.33"
                    export AWS_PARTITION="aws"
                    export CLUSTER_NAME="${ClusterName}"
                    export AWS_DEFAULT_REGION="${AWS::Region}"
                    export AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
                    export TEMPOUT="$(mktemp)"
                    helm registry logout public.ecr.aws
                    helm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter \
                    --version "$KARPENTER_VERSION" \
                    --namespace "$KARPENTER_NAMESPACE" --create-namespace \
                    --set "settings.clusterName=$CLUSTER_NAME" \
                    --set controller.resources.requests.cpu=1 \
                    --set controller.resources.requests.memory=1Gi \
                    --set controller.resources.limits.cpu=1 \
                    --set controller.resources.limits.memory=1Gi \
                    --set settings.featureGates.nodeRepair=true \
                    --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="${KarpenterControllerIamRoleArn}" \
                    --wait' > /home/ec2-user/${Name}/install_karpenter.sh
                    chmod +x /home/ec2-user/${Name}/install_karpenter.sh
                    # /home/ec2-user/${Name}/install_karpenter.sh
                    # kubectl apply -f /home/ec2-user/manifests
                    EOF
                  - ClusterName: !Ref 
                      Fn::Sub: ${Name}EksCluster
                    KarpenterControllerIamRoleArn: !GetAtt
                      - !Sub ${Name}KarpenterControllerIamRole
                      - Arn
                    
  EksClusterIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
  EksClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for EKS Clusters"
      GroupName: eks-cluster-sg
      VpcId: !Ref Vpc
  EksClusterSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt EksClusterSecurityGroup.GroupId
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt EksClusterSecurityGroup.GroupId 
  EksNodeIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  KarpenterNodeIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  CloudWatchObservabilityIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - pods.eks.amazonaws.com
            Action:
              - sts:AssumeRole
              - sts:TagSession
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

Outputs:
  VsCode:
    Value: !Sub http://${BastionEc2.PublicIp}:8000
    Description: VsCode on BastionEC2