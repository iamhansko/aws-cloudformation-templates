Transform: AWS::LanguageExtensions
Parameters:
  InboundFromAnywhere:
    Type: String
    Default: "False"
    AllowedValues: ["True", "False"]
    Description: SeucirtyGroup Inbound Rule (Source 0.0.0.0/0)
  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
Conditions:
  SecurityGroupInboundFromAnywhere: !Equals [!Ref InboundFromAnywhere, "True"]

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - VsCodeEc2
    Properties:
      FunctionName: python-container
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ImageUri: !Sub ${Ecr.RepositoryUri}:latest
      PackageType: Image
      Timeout: 15
      MemorySize: 128
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: igw
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub public-subnet
      VpcId: !Ref Vpc
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId:
        Ref: !Sub PublicSubnet
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: public-rt
      VpcId: !Ref Vpc
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub
        - "key-${Id}"
        - Id: !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]

  VsCodeEc2:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: '1'                
        Timeout: PT7M
    Properties:
      ImageId: !Ref AmiId
      InstanceType: t3.medium
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet
          GroupSet: 
            - !Ref VsCodeEc2SecurityGroup
      Tags: 
        - Key: Name
          Value: vscode
      IamInstanceProfile: !Ref VsCodeEc2InstanceProfile
      UserData: 
        # sudo tail -f /var/log/cloud-init-output.log
        Fn::Base64: !Sub |
          #!/bin/bash
          dnf update -yq
          dnf install -yq git
          dnf groupinstall -yq "Development Tools"

          export VSC_VERSION="4.104.2"
          wget https://github.com/coder/code-server/releases/download/v$VSC_VERSION/code-server-$VSC_VERSION-linux-amd64.tar.gz
          tar -xzf code-server-$VSC_VERSION-linux-amd64.tar.gz
          mv code-server-$VSC_VERSION-linux-amd64 /usr/local/lib/code-server
          ln -s /usr/local/lib/code-server/bin/code-server /usr/local/bin/code-server
          mkdir -p /home/ec2-user/.config/code-server
          cat <<EOF > /home/ec2-user/.config/code-server/config.yaml
          bind-addr: 0.0.0.0:8000
          auth: none
          cert: false
          EOF
          chown -R ec2-user:ec2-user /home/ec2-user/.config
          cat <<EOF > /etc/systemd/system/code-server.service
          [Unit]
          Description=VS Code Server
          After=network.target
          [Service]
          Type=simple
          User=ec2-user
          ExecStart=/usr/local/bin/code-server --config /home/ec2-user/.config/code-server/config.yaml /home/ec2-user
          Restart=always
          [Install]
          WantedBy=multi-user.target
          EOF
          systemctl daemon-reload
          systemctl enable code-server
          systemctl start code-server

          dnf install -yq docker
          systemctl enable --now docker
          # usermod -aG docker ec2-user
          # newgrp docker
          chmod 666 /var/run/docker.sock

          mkdir -p /home/ec2-user/lambda

          echo 'import json
          import boto3
          import requests
          s3 = boto3.client("s3")
          def lambda_handler(event, context):
            try:
              response = requests.get("https://cataas.com/cat?html=true")
              s3.put_object(Bucket="${S3Bucket}", Key="cat.html", Body=response.text, ContentType="text/html")
              return {
                "statusCode": 200,
                "body": json.dumps("Success")
              }
            except Exception as e:
              return {
                "statusCode": 500,
                "body": json.dumps(e)
              }' > /home/ec2-user/lambda/index.py

          echo 'requests' > /home/ec2-user/lambda/requirements.txt
          
          echo 'FROM public.ecr.aws/lambda/python:3.13
          COPY requirements.txt $LAMBDA_TASK_ROOT
          RUN pip install -r requirements.txt
          COPY index.py $LAMBDA_TASK_ROOT
          CMD [ "index.lambda_handler" ]' > /home/ec2-user/lambda/Dockerfile

          echo '#!/bin/bash
          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
          docker buildx build --push --platform linux/amd64 --provenance=false -t ${Ecr.RepositoryUri}:latest /home/ec2-user/lambda' > /home/ec2-user/lambda/build.sh
          chmod +x /home/ec2-user/lambda/build.sh
          chown -R ec2-user:ec2-user /home/ec2-user/lambda
          /home/ec2-user/lambda/build.sh

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource VsCodeEc2 --region ${AWS::Region}
  VsCodeEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      GroupName: vscode-sg
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        !If [SecurityGroupInboundFromAnywhere, [{
          "IpProtocol": "tcp",
          "FromPort": 8000,
          "ToPort": 8000,
          "CidrIp": "0.0.0.0/0"
        }], []]
      Tags:
        - Key: Name
          Value: vscode-sg
  VsCodeEc2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  VsCodeEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: 
        - !Ref VsCodeEc2IamRole
  
  Ecr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: lambda
      EmptyOnDelete: True
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement: 
          - Sid: LambdaECRImageRetrievalPolicy
            Effect: Allow
            Principal: 
              Service: lambda.amazonaws.com
            Action: 
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
  
  S3Bucket:
    Type: AWS::S3::Bucket

Outputs:
  VsCode:
    Value: !Sub http://${VsCodeEc2.PublicIp}:8000
    Description: Public IP Address of the VS Code